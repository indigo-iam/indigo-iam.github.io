[{"body":"IAM provides a set of APIs that can be used for authentication, authorization and IAM administration purposes.\n","excerpt":"IAM provides a set of APIs that can be used for authentication, …","ref":"/v/v1.7.0/docs/reference/api/","title":"APIs"},{"body":"IAM provides a RESTful API that can be used to manage the IAM Acceptable Usage Policy (AUP) configuration.\nGET /iam/aup Returns a JSON representation of the Acceptable Usage Policy (AUP) for the organization.\nAuthentication required: no\nSuccess response Condition: The AUP is defined for the organization\nCode: 200 OK\nContent: A JSON representation of the AUP\n{ \"url\": \"http://somehost.example.org/aup\", \"text\": \"This is my AUP text\", \"description\": null, \"signatureValidityInDays\": 365, \"creationTime\": \"2018-02-27T07:26:21.000+01:00\", \"lastUpdateTime\": \"2018-02-27T07:26:21.000+01:00\" } Note: text is returned for backward compatible calls.\nError response Condition: The AUP is not defined for the organization\nCode: 404 NOT FOUND\nContent:\n{ \"error\":\"AUP is not defined for this organization\" } POST /iam/aup Creates the AUP for the organization\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nData constraints\nProvide a representation of the AUP to be created\n{ \"url\": [url, not blank], \"description\": [text, optional, at most 128 chars], \"signatureValidityInDays\": [integer, \u003e= 0] } Data example\n{ \"url\": \"http://somehost.example.org/aup\", \"signatureValidityInDays\": 365 } Success response Condition: The AUP is created for the organization\nCode: 201 CREATED\nError responses Condition: The AUP already exists\nCode: 409 CONFLICT\nContent:\n{ \"error\": \"AUP already exists\" } Or\nCondition: Missing or invalid fields in the AUP representation\nCode: 400 BAD REQUEST\nOr\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } Or\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\": \"Access is denied\" } PATCH /iam/aup Updates the AUP for the organization\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nData constraints\nProvide a representation of the AUP to be patched\n{ \"url\": [url, not blank], \"description\": [text, optional, at most 128 chars], \"signatureValidityInDays\": [integer, \u003e= 0] } Data example\n{ \"url\": \"http://somehost.example.org/aup\", \"signatureValidityInDays\": 365 } Success response Condition: The AUP is modified for the organization\nCode: 200 OK\nContent example:\n{ \"creationTime\": \"2018-02-27T19:51:39.083+01:00\", \"description\": null, \"lastUpdateTime\": \"2018-02-27T19:53:49.557+01:00\", \"signatureValidityInDays\": 0, \"url\": \"http://somehost.example.org/aup\" } Error responses Condition: Missing or invalid fields in the AUP representation\nCode: 400 BAD REQUEST\nOr\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } Or\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\": \"Access is denied\" } DELETE /iam/aup Deletes the AUP for the organization.\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nSuccess response Condition: The AUP is defined for the organization\nCode: 204 NO CONTENT\nError responses Condition: The AUP is not defined for the organization\nCode: 404 NOT FOUND\nContent:\n{ \"error\": \"AUP is not defined for this organization\" } Or\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } Or\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\": \"Access is denied\" } ","excerpt":"IAM provides a RESTful API that can be used to manage the IAM …","ref":"/v/v1.7.0/docs/reference/api/aup-api/","title":"AUP management API"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/tasks/administration/","title":"IAM organization administration"},{"body":"IAM provides a registration service that allows to have managed enrollment for the organization under control. This mean that access to the organization is only granted after explicit approval by a IAM administrator for the organization.\nSubmitting a registration request Users can submit a registration request from the IAM login page in two ways:\n By clicking the Register a new account button:   By attempting a login with an external authentication provider such as Google or a configured SAML IdP: in this case if the external authentication succeeds and the authenticated user is not registered in the IAM the user is taken to the registration form to confirm the registration requests.  All the fields in the registration form are mandatory. The notes field can used to include extra information targeted at IAM administrators to clarify the reasons behind a registration request.\nConfirming a registration request If the submission ends successfully, an email verification link is sent to the user email address with a request to confirm his registration request.\nOnce the request is confirmed, IAM administrators are notified with an email.\nChoosing a password Once the submitteed request is approved by an IAM administrator, an email is sent to the user with a reset password link. This URL points to page where the user can choose a password for the IAM account.\nOnce the password is set, users can login to the IAM using the username chosen at registration time and the password.\n","excerpt":"IAM provides a registration service that allows to have managed …","ref":"/v/v1.7.0/docs/tasks/user/joining-a-collaboration/","title":"Joining an IAM-managed organization"},{"body":"Starting with version 1.6.0, IAM introduces support for JWT profiles.\nA JWT profile is a named set of rules that defines which information is included in access tokens, id tokens, userinfo and introspection responses issued by IAM in an OAuth/OIDC message exchanges.\nIAM allows to define a default profile that is used for all clients that are not explicitly bound to one. This allows to use the same profile across all clients in an organization.\nIt’s also possible to define the profile to be used at client level, using scopes, i.e. adding among the scope allowed for the client the name of the profile the client should use. The scope, in this context, does not identify a set of permissions but an encoding of authentication/authorization informations in tokens and responses issued by IAM.\nThis mechanism enables integration of the same IAM instance with resources relying on different profiles.\nIAM currently supports three JWT profiles:\n the iam profile the wlcg WLCG profile the aarc profile  Setting the default profile The IAM JWT default profile is set using the IAM_JWT_DEFAULT_PROFILE environment variable, e.g.:\nIAM_JWT_DEFAULT_PROFILE=iam The default profile will be used for all clients that do not explicitly and correctly request the use of a profile using scopes.\nUsing scopes to select the JWT profile for a client To select the profile used by a client, include one of the following scopes in the list of scopes authorized for a client:\n iam, for the IAM profile wlcg, for the WLCG profile aarc profile, for the AARC profile  Clients should only link to one profile. When multiple profiles are linked to a client, IAM falls back to the default profile configured for the IAM instance.\nUsing system scopes to control profile selection MitreID System Scopes can be used to control access to profile selection.\nFor example, by setting a profile scope as restricted, such scope will not be available to dynamically registered clients and can only be assigned to clients by IAM administrators.\nSupported JWT profiles The IAM profile This is the default profile for IAM.\nWith this profile:\n  groups are enconded in the groups claim; all the groups the user is member of are included in the groups claim;\n  authentication information (username, email, groups) is not by default included in access tokens; this behaviour can be changed by setting the IAM_ACCESS_TOKEN_INCLUDE_AUTHN_INFO=true environment variable;\n  scope information is not by default included in access tokens; this behaviour can be changed by setting the IAM_ACCESS_TOKEN_INCLUDE_SCOPE=true environment variable;\n  the nbf (not before) claim is not set in access tokens; this behaviour can be changed by setting the IAM_ACCESS_TOKEN_INCLUDE_NBF=true environment variable;\n  This profile is assigned to clients using the iam scope.\nThe WLCG profile This profile implements the Common JWT Token profile.\nIn particular:\n the scope claim is always included in access tokens; groups are not included by default in access and ID tokens;  This profile is assigned to clients using the wlcg scope.\nRequesting groups with the WLCG profile When the WLCG profile is used, groups are not automatically included in access tokens and ID tokens, but can be requested using the wlcg.groups scope, following the rules described in the WLCG profile.\nOptional groups Optional groups are groups whose membership is only asserted in tokens on explicit request coming from a user.\nIn order to configure a IAM group as an optional group, add the wlcg.optional-group label to the group.\nThe AARC profile This profile encodes group membership information following the rules defined by the AARC G002 profile document.\nIn particular:\n groups and organisation name are not included by default in access and ID tokens; organisation name can be requested using the eduperson_scoped_affiliation scope and it’s encoded in the eduperson_scoped_affiliation claim; groups can be requested using the eduperson_entitlement scope and they’re encoded as URN in the eduperson_entitlement claim;  All the mapping rules are described in the White Paper for implementation mappings between SAML 2.0 and OpenID Connect in Research and Education.\nThis profile is assigned to clients using the aarc scope.\n","excerpt":"Starting with version 1.6.0, IAM introduces support for JWT profiles. …","ref":"/v/v1.7.0/docs/reference/configuration/jwt-profiles/","title":"JWT profiles support"},{"body":"IAM relies on NGINX for TLS termination and load balancing.\nThe example configuration below provides the minimal configuration needed to have NGINX working as a reverse proxy for the IAM web application:\nserver { listen 443 ssl; server_name YOUR_HOSTNAME_HERE; access_log /var/log/nginx/iam.access.log combined; ssl on; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_certificate /path/to/your/ssl/cert.pem; ssl_certificate_key /path/to/your/ssl/key.pem; location / { proxy_pass THE_IAM_APP_HOSTNAME_HERE:8080; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; proxy_set_header Host $http_host; } X.509 client authentication IAM supports X.509 client certificate authentication. To enable X.509 client certificate authentication use a configuration similar to the one used in the IAM development environment.\nIn particular, set the ssl_verify_client=Optional option and configure the proxy_set_header directory as follows:\nproxy_set_header X-SSL-Client-Cert $ssl_client_cert; proxy_set_header X-SSL-Client-I-Dn $ssl_client_i_dn; proxy_set_header X-SSL-Client-S-Dn $ssl_client_s_dn; proxy_set_header X-SSL-Client-Serial $ssl_client_serial; proxy_set_header X-SSL-Client-V-Start $ssl_client_v_start; proxy_set_header X-SSL-Client-V-End $ssl_client_v_end; proxy_set_header X-SSL-Client-Verify $ssl_client_verify; proxy_set_header X-SSL-Protocol $ssl_protocol; proxy_set_header X-SSL-Server-Name $ssl_server_name; ","excerpt":"IAM relies on NGINX for TLS termination and load balancing.\nThe …","ref":"/v/v1.7.0/docs/getting-started/nginx/","title":"NGINX configuration"},{"body":"A token can be obtained from a command-line interface (CLI) in two ways:\n using oidc-agent using scripts linked to this page, using the resource-owner password credentials flow or the OAuth device flow  In this section we recommend the installations of a set of tools that can help in managing tokens.\nObtaining a token using oidc-agent oidc-agent is a useful tool to easily get and manage access tokens for command-line applications.\nInstalling oidc-agent See oidc-agent installation instructions.\nQuick CENTOS7 installation instructions This recipe shows how to quickly install oidc-agent on CENTOS 7.\n$ yum -y install epel-release $ yum -y install https://github.com/indigo-dc/oidc-agent/releases/download/v3.3.1/oidc-agent-3.3.1-1.el7.x86_64.rpm Bootstrapping oidc-agent The first thing to do is to start oidc-agent. This can be done issuing the following command:\n$ eval $(oidc-agent) Agent pid 62088 Registering a client In order to obtain a token out of IAM, a user needs a client registered. oidc-agent can automate this step and store client credentials securely on the user machine.\nA new client can be registered using the oidc-gen command, as follows:\n$ oidc-get -w device wlcg The -w device instructs oidc-agent to use the device code flow for the authentication, which is the recommended way with IAM.\noidc-agent will display a list of different providers that can be used for registration:\n[1] https://wlcg.cloud.cnaf.infn.it/ [2] https://iam-test.indigo-datacloud.eu/ ... [20] https://oidc.scc.kit.edu/auth/realms/kit/ Select one of the registered providers, or type a custom issuer (for IAM, the last character of the issuer string is always a /, e.g. https://wlcg.cloud.cnaf.infn.it/).\nThen oidc-agent asks for the scopes, typing max (without quotes) allows to get all the allowed scopes.\noidc-agent will register a new client and store the client credentials and a refresh token locally in encrypted form (the agent will ask for a password from the user).\nGetting tokens Tokens can be obtained using the oidc-token command, as follows:\noidc-token wlcg This will request a token with all the scopes requested at client registration time. To limit the scopes included in the token, the -s flag can be used, as follows:\noidc-token -s storage.read:/ wlcg The token audience can be limited using the --aud flag,\noidc-token --aud example.audience -s storage.read:/ wlcg Obtaining a token with the password flow The password flow allows a user to get a token from the IAM by using the IAM local credentials (i.e. the username/password credentials setup at IAM registration time).\nIn order to use the password flow, a non-privileged user has to:\n register a client following the instructions given in [the client registration][client-registration] section Note down the client_id of the generated client and ask an IAM administrator to enable the password flow for such client Wait until the client as the password flow enabled Use a script similar to the one given here (or write your own following the recommendations of the RFC) to obtain a token out of the IAM  Warning While this approach is viable, it is deprecated since:\n it forces the user to request the activation of the password flow for the client (it is disabled by default for dynamically registered clients) it forces the user to authenticate with the local IAM credentials (external authentication mechanisms such as Google or SAML cannot be used) it exposes the user credentials to the client application  The device code flow, described in the next section, does not have these limitations and should be preferred over the password flow.\n Obtaining a token with the device code flow The device code flow allows a user to get a token from the IAM from a CLI interface while using an external browser for the authentication step. This is convenient since:\n it does not require any authorization from administrators (the device code flow can be requested by the user at client registration time) it allows the user to authenticate with any of the authentication mechanisms supported by the IAM it does not expose the user credentials to the client application  For nitty and gritty details on how the flow works, see the RFC.\nAfter having registered a client with the device flow enabled (see client registration section), the device code flow can be used to obtain a token using a script like the one here which does the following:\n contacts the device flow endpoint to start a device flow authentication and authorization prints code information on the terminal waits for user input to proceed and obtain the token(s)  ","excerpt":"A token can be obtained from a command-line interface (CLI) in two …","ref":"/v/v1.7.0/docs/tasks/user/getting-a-token/","title":"Obtaining an IAM access token from a CLI"},{"body":"IAM supports brokered OpenID Connect authentication to external identity providers (e.g., Google).\nWhen brokered OpenID Connect authentication is turned on a IAM instance, users can log into the service delegating authentication to one of the supported OpenID Connect providers (OP).\nTo enable brokered OpenID Connect authentication on your IAM instance you have to:\n Obtain client credentials and other configuration details for each of the external OpenID Connect providers; Provide the OIDC configuration file defining the configuration of the supported OPs; Enable the oidc profile.  Obtain OP configuration and client credentials In order to act as a relying party (RP) for an external OpenID Connect provider (OP), IAM will need at least:\n client credentials (a clientId and clientSecret); an OpenID Connect provider discovery endpoint URL;  As an example, see the the Google identity platform OpenID Connect guide for help on this.\nProvide the OIDC configuration Google configuration If Google is the only OpenID Connect provider you want to support, the configuration embedded in the IAM war file already provides what you need, and you just need to:\n  Enable the oidc profile;\n  Pass the google client credentials to IAM via the following environment variables:\n IAM_GOOGLE_CLIENT_ID IAM_GOOGLE_CLIENT_SECRET    Multiple providers configuration To configure multiple providers, or to override the default configuration, you must provide an application-oidc.yaml configuration file and make it available to IAM.\nTrusted OPs are configured for IAM via the application-oidc.yaml configuration file.\nThis is a Spring Boot configuration file that is activated when the oidc profile is turned on.\nThe default configuration file, embedded in the IAM war file, supports the configuration of a single provider, Google, for backward compatibility, and looks like this:\noidc:providers:- name:googleissuer:https://accounts.google.comclient:clientId:${IAM_GOOGLE_CLIENT_ID}clientSecret:${IAM_GOOGLE_CLIENT_SECRET}redirectUris:${iam.baseUrl}/openid_connect_loginscope:openid,profile,email,address,phoneloginButton:text:Googlestyle:btn-social btn-googleimage:fa-icon:googleThis configuration allows to configure support for Google by:\n activating the oidc profile; Setting the IAM_GOOGLE_CLIENT_ID and IAM_GOOGLE_CLIENT_SECRET environment variables to provide the Google client credentials;  To enable multiple providers, you need to override the default oidc configuration.\noidc:providers:- name:googleissuer:https://accounts.google.comclient:clientId:${IAM_GOOGLE_CLIENT_ID}clientSecret:${IAM_GOOGLE_CLIENT_SECRET}redirectUris:${iam.baseUrl}/openid_connect_loginscope:openid,profile,email,address,phoneloginButton:text:Googlestyle:btn-social btn-googleimage:fa-icon:google- name:egi-checkinissuer:${IAM_CHECKIN_ISSUER}client:clientId:${IAM_CHECKIN_CLIENT_ID}clientSecret:${IAM_CHECKIN_CLIENT_SECRET}redirectUris:${iam.baseUrl}/openid_connect_loginscope:${IAM_CHECKIN_CLIENT_SCOPE:openid,profile,email}loginButton:text:EGI CheckIntitle:Sign in with EGI CheckInimage:url:https://egi.eu/wp-content/uploads/2016/05/cropped-logo_site-1-300x300.pngsize:mediumThe example configuration above shows how to configure support for Google and the EGI CheckIn provider, with a custom button configuration for the CheckIn provider.\nSee the configuration reference for instructions on how to override the default IAM configuration.\n","excerpt":"IAM supports brokered OpenID Connect authentication to external …","ref":"/v/v1.7.0/docs/reference/configuration/external-authentication/oidc/","title":"OpenID-Connect authentication"},{"body":"The INDIGO Identity and Access Management (IAM) Service provides a layer where identities, enrollment, group membership and other attributes and authorization policies on distributed resources can be managed in an homogeneous way, supporting identity federations and other authentication mechanisms (X.509 certificates and social logins).\nIAM implements the Virtual Organization (VO) concept, and is the developed by the same team behind VOMS.\nIAM is the AAI solution chosen to power the next generation WLCG Authentication and Authorization infrastructure.\nFunctions  Flexible authentication: The IAM supports user authentication via local username and password credentials as well as SAML Identity Federations, OpenID Connect providers and X.509. Enrollment: The IAM provides VO enrollment and registration functionalities, so that users can join groups/collaborations according to well-defined flows. Attribute and identity management: The IAM provides services to manage group membership, attributes assignment and account linking functionality. User provisioning: the IAM provides endpoints to provision information about users identities to other services, so that consistent local account provisioning, for example, can be implemented.  Integrations The IAM service has been succesfully integrated with many off-the-shelf components like Openstack, Kubernetes, Atlassian JIRA and Confluence, Grafana and with key Grid computing middleware services (e.g., RUCIO, FTS, dCache, StoRM, XRootD, HTCondor).\nService access options IAM as a service INFN provides IAM as a service to partner research communities. In this scenario, a dedicated IAM instance is deployed on the INFN infrastructure and configured according to the community needs. INFN takes care of keeping the service operational and up-to-date, while administrative control on the IAM instance is granted to the community.\nFor more information on how to access IAM as a service, click here.\nOn-premise deployment IAM is an Apache-licensed identity solution, for which we provide a Docker image on dockerhub and RPM and Debian packages.\nIAM can be deployed on-premises following the advice in the Deployment and administration guide.\n","excerpt":"The INDIGO Identity and Access Management (IAM) Service provides a …","ref":"/v/v1.7.0/docs/overview/","title":"Overview"},{"body":"IAM provides tools to manage users in an organization. All the actions described below require administrator privileges.\nCreating a user account A new user account in the organization can be created from the “Users” management panel by clicking on the “Add user” button at the bottom of the page:\nA dialog is shown that allows to set basic user information:\nDeleting a user account User accounts can be deleted from the “Users management” section of the dashboard by clicking on the delete button for the users that should be deleted:\nDisabling a user account User accounts can be disabled from the user home page by clicking on the “Disable user” button. Disabled users are not allowed to login in the IAM and, as such, cannot authenticate at any services that rely on the IAM for authentication and authorization.\nManaging user account privileges Administrator privileges can be assigned to a user from the user home page by clickin on the “Assign administrator privileges” button:\nManaging external user account identities Administrators can manually add and remove external accounts and certificates for a local user account from the user home page:\n","excerpt":"IAM provides tools to manage users in an organization. All the actions …","ref":"/v/v1.7.0/docs/tasks/administration/user-management/","title":"User management"},{"body":"Most IAM configurable aspects are configured via environment variables and Spring profile directives.\nSpring profiles Spring profiles are used to enable/disable group of IAM functionalities. Currently the following profiles are defined:\n   Profile name Active by default Description     prod no This is the profile you should enable when using IAM   h2-test yes Enables h2 in-memory database, useful for development and testing   mysql-test no Like h2-test, but used to develop against a MySQL database   google no Enables Google authentication   saml no Enables SAML authentication   registration yes Enables user registration and reset password functionalities    Profiles are enabled by setting the spring.profiles.active Java system property when starting the IAM service. This can be done, using the official IAM docker image, by setting the IAM_JAVA_OPTS environment variable as follows:\nIAM_JAVA_OPTS=\"-Dspring.profiles.active=prod,google,saml\" Overriding default configuration templates Fine-grained control over configuration can be obtained following the rules for spring boot externalized configuration. This basically means defining one or more YAML files to override the default configuration files embedded in the IAM Web Archive (war) package for the Spring profiles activated for your instance. The files must be placed in the IAM configuration directory, which depends on how you deployed IAM:\n   Deployment type Configuration directory     Docker /indigo-iam/config/   Package (RPM) /etc/indigo-iam/config    IMPORTANT: the default configuration should solve most use cases, override default configuration only if you know what you are doing, and for those scenarios not served by the default templates.\nBasic service configuration # The IAM service will list for requests on this host. IAM_HOST=localhost # The IAM service webapp will bind on this port. IAM_PORT=8080 # The IAM web application base URL IAM_BASE_URL=http://${IAM_HOST}:8080 # The OpenID Connect issuer configured for this IAM instance. # This must be equal to IAM_BASE_URL IAM_ISSUER=http://${IAM_HOST}:8080 # The path to the JSON keystore that holds the keys IAM will use to sign and # verify token signatures IAM_KEY_STORE_LOCATION= # IAM will look for trust anchors in this directory. These trust anchors are # needed for TLS operations where the IAM acts as a client (i.e., to # authenticate to remote SAML Identity providers) IAM_X509_TRUST_ANCHORS_DIR=/etc/grid-security/certificates # How frequently (in seconds) should trust anchors be refreshed IAM_X509_TRUST_ANCHORS_REFRESH=14400 # Use forwarded headers from reverse proxy. Set this to true when deploying the # service behind a reverse proxy. IAM_USE_FORWARDED_HEADERS=false ## Tomcat embedded container settings # Enables the tomcat access log IAM_TOMCAT_ACCESS_LOG_ENABLED=false # Directory where the tomcat access log will be written (when enabled) IAM_TOMCAT_ACCESS_LOG_DIRECTORY=/tmp ## Actuator endpoint settings # Sets the username of the user allowed to have privileged access to actuator # endpoints IAM_SUPERUSER_USERNAME=whatever # Sets the password of the user allowed to have privileged access to actuator # endpoints IAM_SUPERUSER_PASSWORD=whatever ## Local resources configuration # Enables the serving of resources from the local file system  IAM_LOCAL_RESOURCES_ENABLE=false # Sets the directory that contains the local resources that should be exposed IAM_LOCAL_RESOURCES_LOCATION=file:/indigo-iam/local-resources Organization configuration # The name of the organization managed by this IAM instance. IAM_ORGANISATION_NAME=indigo-dc # URL of logo image used in the IAM dashboard (by default the INDIGO-Datacloud # project logo image is used) IAM_LOGO_URL=resources/images/indigo-logo.png # Size of the logo image (in pixels) IAM_LOGO_DIMENSION=200 # Height of the logo image (in pixels) IAM_LOGO_HEIGTH=150 # Width of the logo image (in pixels) IAM_LOGO_WIDTH=200 # String displayed into the brower top bar when accessing the IAM dashboard IAM_TOPBAR_TITLE=\"INDIGO IAM for ${IAM_ORGANISATION_NAME}\" Access token contents configuration ## Token content settings  # Include authentication claims in issued access tokens IAM_ACCESS_TOKEN_INCLUDE_AUTHN_INFO=false # Includes the scope in issued access tokens IAM_ACCESS_TOKEN_INCLUDE_SCOPE=false # Includes the nbf claim in issued access tokens IAM_ACCESS_TOKEN_INCLUDE_NBF=false Database configuration # The host where the MariaDB/MySQL daemon is running IAM_DB_HOST= # The database port IAM_DB_PORT=3306 # The database name IAM_DB_NAME=iam # The database username IAM_DB_USERNAME=iam # The database password  IAM_DB_PASSWORD=pwd ## Database connection pool options # Maximum number of active connections to the database IAM_DB_MAX_ACTIVE=50 # Maximum number of idle connections in the pool  IAM_DB_MAX_IDLE=5 # Initial size of the database connection pool IAM_DB_INITIAL_SIZE=8 # Should idle connections in the pool be tested? IAM_DB_TEST_WHILE_IDLE=true # Should connections in the pool be tested when borrowed? IAM_DB_TEST_ON_BORROW=true # Which SQL query should be used to test connections? IAM_DB_VALIDATION_QUERY=SELECT 1 # Time between database connection pool eviction runs (in msec) IAM_DB_TIME_BETWEEN_EVICTION_RUNS_MILLIS=5000 # The minimum amount of time a connection may be idle in the pool # before it is considered for eviction (in msec) IAM_DB_MIN_EVICTABLE_IDLE_TIME_MILLIS=60000 Google authentication settings # The Google OAuth client id IAM_GOOGLE_CLIENT_ID= # The OAuth client secret IAM_GOOGLE_CLIENT_SECRET= For more information and examples, see the OpenID Connect Authentication section.\nSAML authentication settings # The SAML entity ID for this IAM instance IAM_SAML_ENTITY_ID= # Text shown in the SAML login button on the IAM login page IAM_SAML_LOGIN_BUTTON_TEXT=Sign in with SAML ## SAML keystore settings # The keystore holding certificates and keys used for SAML crypto IAM_SAML_KEYSTORE= # The SAML keystore password IAM_SAML_KEYSTORE_PASSWORD= # The identifier of the key that should be used to sign requests/assertions IAM_SAML_KEY_ID= # The password of the SAML key that will be used to sign requests/assertions IAM_SAML_KEY_PASSWORD= ## Metadata settings # a URL pointing to the SAML federation or IdP metadata IAM_SAML_IDP_METADATA= # Metadata refresh period (in seconds) IAM_SAML_METADATA_LOOKUP_SERVICE_REFRESH_PERIOD_SEC=600 # Should signature validity checks be enforced on metadata? IAM_SAML_METADATA_REQUIRE_VALID_SIGNATURE=false # Trust only IdPs that have SIRTFI compliance IAM_SAML_METADATA_REQUIRE_SIRTFI=false # Comma-separated IDP entity ID whitelist. When empty # all IdPs included in the metadata are whitelisted IAM_SAML_IDP_ENTITY_ID_WHITELIST= ## Assertion validity settings # Maxixum allowed assertion time (in seconds) IAM_SAML_MAX_ASSERTION_TIME=3000 # Maximum authentication age (in seconds) IAM_SAML_MAX_AUTHENTICATION_AGE=86400 ## Other settings # List of attribute aliases that are looked up in assertion to identify the  # user authenticated with SAML IAM_SAML_ID_RESOLVERS=eduPersonUniqueId,eduPersonTargetedId,eduPersonPrincipalName For more information and examples, see the SAML Authentication section.\nNotification service settings ## SMTP mail server settings  # SMTP server hostname  IAM_MAIL_HOST=localhost # SMTP server port  IAM_MAIL_PORT=25 # SMTP server username IAM_MAIL_USERNAME= # SMTP server password IAM_MAIL_PASSWORD= ## IAM notification settings # Should the notification server be disabled? # When set to true, notifications are not sent to the mail server (but # printed to the logs) IAM_NOTIFICATION_DISABLE=false # The email address used as the sender in IAM email notifications IAM_NOTIFICATION_FROM=indigo@localhost # The email address used as the recipient in IAM email notifications IAM_NOTIFICATION_ADMIN_ADDRESS=indigo-alerts@localhost # Time interval, in milliseconds, between two consecutive runs of IAM notification  # dispatch task  IAM_NOTIFICATION_TASK_DELAY=30000 # Retention of delivered messages, in days IAM_NOTIFICATION_CLEANUP_AGE=30 Account linking settings # Should account linking be disabled? When set to true users cannot # link external accounts (Google, SAML) to their local IAM account IAM_ACCOUNT_LINKING_DISABLE=false Privacy policy settings # An URL pointing to a privacy policy document which applies # to this IAM instance. When left blank, no privacy policy link  # is displayed in the login page IAM_PRIVACY_POLICY_URL= # The text displayed in the login page for the privacy policy URL specified # above IAM_PRIVACY_POLICY_TEXT=Privacy policy ","excerpt":"Most IAM configurable aspects are configured via environment variables …","ref":"/v/v1.7.0/docs/reference/configuration/","title":"Configuration"},{"body":"IAM keeps state in a MariaDB/MySQL database, and will need its own schema and a user that has read/write/schema change privileges on such database.\nIAM has been tested successfully against:\n MySQL v. 5.5.5 MariaDB v. 10.1.22  For more instructions on how to create a database schema and a user with administrator privileges on it, see the MariaDB documentation.\nAssuming the organization that IAM will manage is called test, the following commands can be used to create a database and a user for the IAM application:\nCREATEDATABASEiam_test_dbCHARACTERSETlatin1COLLATElatin1_swedish_ci;GRANTALLPRIVILEGESoniam_test_db.*to'iam_test'@'%'identifiedby'some_super_secure_password';You may want to restrict the set of hosts from which a mysql client can connect to the database with the above credentials according to your deployment needs.\n","excerpt":"IAM keeps state in a MariaDB/MySQL database, and will need its own …","ref":"/v/v1.7.0/docs/getting-started/mariadb/","title":"Database configuration"},{"body":"This section provides insight on how to deploy and configure an IAM service instance.\nIAM is a spring boot application designed to run behind an NGINX reverse proxy, which is used for TLS termination and possibly load balancing. The IAM service instances keep all state in a MariaDB/MySQL database, as shown in the following picture:\nPrerequisites At the bare minimum, to run a production instance of the instance of the IAM you will need:\n An X.509 certificate, used for SSL termination at the NGINX reverse proxy; you can get one for free from Let’s Encrypt; An NGINX server configured to act as a reverse proxy for the IAM web application; more details on this in the NGINX section; A MariaDB/MySQL database instance; more on this in the database configuration section; A JSON keystore holding the keys used to sign JSON Web Tokens; more on this in the JWK section;  You will also need to choose whether you want to deploy you service as a docker container (recommended) or install from packages.\nIn case you chose to install from packages you can have a look at the IAM puppet module to deploy and configure the service.\nAnd finally, you will have to setup a minimal IAM configuration and change the administrator password for the newly configured IAM service; more on this in the basic configuration section.\n","excerpt":"This section provides insight on how to deploy and configure an IAM …","ref":"/v/v1.7.0/docs/getting-started/","title":"Getting Started"},{"body":"IAM provides a group management system, that can be used by IAM administrators to create groups, remove existing ones and manage membership in the group.\nGroups can be organized in a hierarchical structure, with the following constraints:\n a group can have only a parent group; a group can have many childrens.  Manage groups using the web interface The simplest way to manage groups is using the IAM dashboard.\nCreating a group From the home page, open the Groups section and click the Add group button:\nTo create a group, specify a group name. If the created group is a subgroup of an already existing group, the parent group can be selected via a dialog.\nNote that IAM allows for multiple root level groups.\nA new children group can also be created from the parent group details page.\nDeleting a group From the groups list page, click on the corresponding Remove button. A confirmation window will be opened, so you can confirm or abort the the delete operation.\nOnly empty groups can be removed. If you try to remove a group with a child group or with user members, the operation fails with an error.\nManaging membership for a group To add a user to a group open the user details page. In the Groups section, click on the Add to group button:\nChoose one or more groups and confirm the operation:\nWhen a user is added as member of a group, he/she does not inherit the membership in the parent group, i.e. the user must be explicitly associated with all the groups.\nTo remove a user from a group, click the Remove button.\nMembers can also be removed from the group details page, as shown in the following screenshot:\n","excerpt":"IAM provides a group management system, that can be used by IAM …","ref":"/v/v1.7.0/docs/tasks/administration/group-management/","title":"Group Management"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/tasks/deployment/","title":"IAM service deployment"},{"body":"IAM exposes the OpenID Connect/OAuth dynamic client registration functionality offered by the MitreID OpenID Connect server libraries.\nIn OAuth terminology, a client is an application or service that can interact with an authorisation server for authentication/authorization purposes.\nA new client can be registered in the IAM in two ways:\n using the dynamic client registration API; via the IAM dashboard (which simply acts as a client to the API mentioned above).  Registering a client using the dashboard Log into the service and click on the MitreID dashboard link on the left navigation bar:\nFrom the MitreID dashboard, select Client registration:\nAnd then click on New client:\nA form will open that enable you to configure your client:\nThe minimum information you have to provide is:\n client name: choose a name for your client Redirect URI(s): one or more redirect URIs for your client; these are required if you choose to enable the authorization code flow;  Remember to select the offline_access scope from the Access tab if you want to request refresh tokens for the client being created:\nYou can then click the “Save” button at the bottom of the page:\nIAM will then generate client credentials for your client and other information that will be displayed as follows:\nThe JSON tab provides client information in JSON:\nSelect the content of the text area and paste it in a local file, for future reference.\nThe JSON file contains the client secret and the registration access token, which can be used later to change the client configuration or to delete the client.\n","excerpt":"IAM exposes the OpenID Connect/OAuth dynamic client registration …","ref":"/v/v1.7.0/docs/tasks/user/client-registration/","title":"Registering a client"},{"body":"IAM supports brokered SAML authentication. When SAML authentication is turned on for an IAM instance, users can log into the service using the home Identity Provider (IdP) credentials.\nTo enable SAML authentication for your IAM instance you have to:\n Choose an entityId for your IAM instance; see the Shibboleth docs for guidance on this Generate a self-signed certificate for your IAM instance that will be used for SAML cryptographic operations and include it in a Java keystore; Obtain SAML metadata from your IdP or identity federation; If the metadata is signed, import the certificate that must be used to verify the signature in the Java keystore generated above; Enable the saml profile for the IAM and configure SAML support via the appropriate environment variables.  Generate a Self-signed certificate To generate a self-signed certificate that lasts 5 years use the following openssl command:\nopenssl req -newkey rsa:2048 -nodes -x509 -days 1825 -keyout self-signed.key.pem \\ -out self-signed.cert.pem The above command will generate a private key and the corresponding certificate in PEM format. You will be asked to provide a subject for the certificate being generated.\nTo import this certificate in a Java keystore we need in in p12 format. Use the following commands to convert the certificate in p12 format and import it in a Java keystore:\nopenssl pkcs12 -export -inkey self-signed.key.pem \\ -name self-signed \\ -in self-signed.cert.pem \\ -out self-signed.p12 keytool -importkeystore -destkeystore self-signed.jks \\ -srckeystore self-signed.p12 \\ -srcstoretype PKCS12 During the above process you will be asked to provide a p12 export password and a keystore password. Use the same password, at least 6 characters long, otherwise it will not work for the java keystore.\nYou can list the contents of the keystore with the following command:\nkeytool -list -keystore self-signed.jks Obtain SAML metadata for your IdP or identity federation You IdP or identity federation will have a SAML metadata document describing, in SAML terms, which authentication flows are enabled and providing access to cryptographic material and other information that make the federated authentication schemes work reliably and securely. For more information on SAML metadata, see the Shibboleth metadata documentation.\nSigned metadata advice Typically identity federations sign the SAML metadata for security reasons, and provide a certificate (and linked public key) that can be used to verify signatures on the metadata at a well-known location (e.g., the federation website).\nTo support metadata signature verification you will need to import this certificate in the Java keystore created above.\nCertificates are typically published in PEM format, while to import a certificate in a Java keystore you will need it in DER format.\nThe following commands show how to import a PEM certificate into a Java keystore:\nopenssl x509 -outform der -in idem_signer_2019.pem -out idem_signer_2019.der keytool -import -alias idem_signer_2019 -keystore self-signed.jks -file idem_signer_2019.der Metadata configuration The IdP or federation metadata to be trusted can be specified with the IAM_SAML_IDP_METADATA environment variable, which contains an URL pointing to the metadata.\nIf the metadata is signed, you can enforce signature validation with the IAM_SAML_METADATA_REQUIRE_VALID_SIGNATURE variable.\nMetadata needs to be periodically refreshed to learn about new entities in the federation or updated key material. The metadata refresh interval can be specified with the IAM_SAML_METADATA_LOOKUP_SERVICE_REFRESH_PERIOD_SEC environment variable, which defines a refresh period in seconds (a reasonable value is typically refresh metadata every hour).\nAn example metadata configuration could be:\nIAM_SAML_IDP_METADATA=http://www.garr.it/idem-metadata/idem-metadata-sha256.xml IAM_SAML_METADATA_REQUIRE_VALID_SIGNATURE=true IAM_SAML_METADATA_LOOKUP_SERVICE_REFRESH_PERIOD_SEC=3600 IAM SAML attribute requirements IAM requires that the IdP used for authentication releases a persistent identifier attribute that can be used to link the external identity to local IAM accounts. If the IdP does not release persistent identifier attributes, it cannot be integrated with the IAM.\nThe attribute used to link the external SAML account is configurable. In the default configuration, IAM uses the following attributes (in the given order):\n EduPersonUniqueId EduPersonTargetedId EduPersonPrincipalName  The order of these can be changed with the IAM_SAML_ID_RESOLVERS environment variable, which accepts a list of aliases for the attributes to be searched.\nThe following tables maps attribute names to the aliases currently supported:\n   SAML attribute Alias     EduPersonUniqueId eduPersonUniqueId   EduPersonTargetedId eduPersonTargetedId   EduPersonPrincipalName eduPersonPrincipalName   EduPersonOrcid eduPersonOrcid   spidCode spidCode    The default value for IAM_SAML_ID_RESOLVERS is:\nIAM_SAML_ID_RESOLVERS=eduPersonUniqueId,eduPersonTargetedId,eduPersonPrincipalName Checking SAML assertion and authentication freshness IAM provides the ability to set a maximum age for SAML assertion and authentication statements received from IdPs.\nThe IAM_SAML_MAX_ASSERTION_TIME allows to define an upper bound (in seconds) on the SAML assertion lifetime, so that assertions that exceed such limit are considered invalid.\nThe IAM_SAML_MAX_AUTHENTICATION_AGE allows to define an upper bound (in seconds) on the authentication age linked to SAML authentication statements, so that users are forced to reauthenticate when this limit is exceeded.\nLimiting authentication only to selected IdPs IAM provides the ability to define constraints on which IdPs will be allowed for authentication. This is useful when you want to limit which IdPs in a large federation (e.g., EduGAIN) will be trusted for authentication.\nCurrently three types of IdPs limiting are supported:\n entity id whitelist SIRTFI compliance Research and Scholarship compliance  Limiting by entity id The IAM_SAML_IDP_ENTITY_ID_WHITELIST environment variable can be used to define a comma-separated whitelist of IdPs entity IDs that will be trusted for authentication.\nThe following example limits trusted IdPs to the INFN IdP:\nIAM_SAML_IDP_ENTITY_ID_WHITELIST=\"https://idp.infn.it/saml2/idp/metadata.php\" Limiting by SIRTFI compliance To limit authentication only to IdPs that are SIRFTI-compliant, set the the IAM_SAML_METADATA_REQUIRE_SIRTFI environment variable to true.\nCustomizing SAML login button text You can customize the SAML login button text shown in the IAM login page with the IAM_SAML_LOGIN_BUTTON_TEXT environment variable.\nMinimal SAML configuration example IAM_SAML_ENTITY_ID=urn:example:iam-saml-example IAM_SAML_KEYSTORE=file:///self-signed.jks IAM_SAML_KEYSTORE_PASSWORD=xxxxxx IAM_SAML_KEY_ID=self-signed IAM_SAML_KEY_PASSWORD=xxxxxx IAM_SAML_IDP_METADATA=http://www.garr.it/idem-metadata/idem-metadata-sha256.xml IAM_SAML_METADATA_REQUIRE_VALID_SIGNATURE=true IAM_SAML_METADATA_LOOKUP_SERVICE_REFRESH_PERIOD_SEC=3600 IAM_SAML_LOGIN_BUTTON_TEXT=\"Sign in with IDEM\" Custom SAML configuration The configuration based on environment variables relies on a configuration template that fits most use cases embedded in the IAM war file.\nTo have full control on the SAML configuration, provide a custom application-saml.yml file in the IAM configuration directory.\nSee the configuration reference for more SAML metadata options and instructions on how to override the default IAM configuration.\n","excerpt":"IAM supports brokered SAML authentication. When SAML authentication is …","ref":"/v/v1.7.0/docs/reference/configuration/external-authentication/saml/","title":"SAML authentication"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/tasks/user/","title":"User"},{"body":"JSON web keys are used by the IAM to sign and verify token signatures.\nTo generate a JSON web key for your IAM deployment, you can use the json-web-key-generator tool provided by MitreID connect.\nThe following command clones the json-web-key-generator Git repository to a local directory:\ngit clone https://github.com/mitreid-connect/json-web-key-generator Build the code with:\nmvn package You can then generate a key with the following command:\njava -jar target/json-web-key-generator-0.4-SNAPSHOT-jar-with-dependencies.jar \\  -t RSA -s 1024 -S -i rsa1 Full key: { \"keys\": [ { \"p\": \"3oh7ex6zgdmJh5NBD0IplmBDDGC2ECu2A1vcp8e8DqE7OSSpAc1T9tTjJioCGqkNM51JK_MtgCJz1CiysVDOQQ\", \"kty\": \"RSA\", \"q\": \"nRmBm5tQ2wmOtd1XUYDRH2qWai6eElt-1cvO5tnTdWZkFaAeaHQ3_xf_PFOjyAv5Y5rNLgf_Xbu9UCo_mSrDMQ\", \"d\": \"BGHRhQP6ADqqSrM8_mI0YhjGStj1aW9rLi7wXQMJ122kegPxIT7dfP-5UScxykD_BrCCHQVPxdJl5wXy-giZnhaL9wtDkOXb8D8RCi1n02cs3Z1T23xONi_AG47QPBZjM5GcX-oOGCENByuEIdkU_Bn6vvqM3oyVlj5sio7tNAE\", \"e\": \"AQAB\", \"kid\": \"rsa1\", \"qi\": \"RarXtTFCE3hk5ZanLWEapDnn7SLSxAvDcBTmG5SpCI9Eix7cfTigaK6N7OQIN0uGO1GJ-KVWL2v8dyI1jMoU6g\", \"dp\": \"MtBtieavzMXUzr2ETKyp_GmMxeXLjRO-IzQ1xaYpPhn5AQprATtWofVozQ0on9fcaN3QmJWV3T2Av4BvlWfDQQ\", \"dq\": \"CWJ7rpsBooQYpV6al8DVPUY1xBQS10_l7MmnC31Zt3qtYelVx7GhoriBQ85PS2UDueKGfUh3BddwQLi1YeX_EQ\", \"n\": \"iI_fuJq4z_9VQY5EH41sQWOAYUsjtxAFjRnAc1P5-GPOx3Izg9V7yKNmudLUt-jIkv6D5h-AzrhEV6DOdBRoiN4el1mCZ95jiJkjU2kpVOmutDysZkrn667zPd43w7E6IqHnahmMrVUjUyx6pie1SqJHLUXghz8Gle-1yi08_XE\" } ] } Save the output of the above command (minus the Full key: initial text) in a file, e.g. iam-keystore.jwks.\n","excerpt":"JSON web keys are used by the IAM to sign and verify token signatures. …","ref":"/v/v1.7.0/docs/getting-started/jwk/","title":"JSON Web Keys configuration"},{"body":"Starting with version 1.2.0, IAM supports defining an Acceptable Usage Policy Document (AUP) for a managed organization. The AUP is presented to applicants at registration time or periodically.\nManaging the AUP The AUP can be managed from the “AUP” section in the IAM dashboard, or via the AUP management API.\nAdministrator privileges are required.\nCreating the AUP By default, the AUP is not defined for an organization, i.e. it must be explicitly defined by an IAM administrator.\nThe AUP can be created by clicking on the “Create AUP” button in the AUP management page (that can be reached clicking the “AUP” link in the organization Management navigation bar):\nA dialog is shown:\nwhere the administrator can enter the AUP URL and define how frequently the AUP should be accepted by users.\nIf the AUP signature validity is set to 0, a signature on the AUP will be requested only once (either at registration time or at the first IAM login after the AUP creation). A zero value means basically that the AUP signature does not expire.\nA positive value in the AUP signature validity means, on the other hand, that the signature will expire after that number of days. As an example, an administrator that wants the AUP to signed each year by users should put 365 in the “AUP signature validity” field.\nEditing and deleting the AUP The AUP can be edited and deleted from the AUP management page:\nSince version 1.6.0, the AUP has been converted from text to a URL. If you have just upgraded to 1.6.0 and you have already defined a text AUP, you should see the following red message below your AUP:\nBy clicking on “Edit AUP”, admins are prompted to insert a valid URL.\nAs shown in the picture above, editing the AUP will not trigger an AUP signature request.\nRequest a signature from users If you want to request a signature from users for the updated AUP, use the “Request AUP signature” button in the AUP management page.\nA dialog is shown:\nConfirm by clicking on “Request AUP signature” and the acceptance of the AUP will be requested from ALL users at their next login.\nSigning the AUP Once defined the AUP text is shown to users for acceptance either at registration time:\nor at the first login after the AUP creation:\n","excerpt":"Starting with version 1.2.0, IAM supports defining an Acceptable Usage …","ref":"/v/v1.7.0/docs/tasks/administration/aup-management/","title":"Acceptable Usage Policy (AUP) management"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/reference/configuration/external-authentication/x509/","title":"X.509 authentication"},{"body":"The IAM service is provided on the following DockerHub repositories:\n indigoiam/iam-login-service  The docker image tag corresponding to this version of the documentation is:\nindigoiam/iam-login-service:v1.7.0\n Configuration and run Prepare an environment file that will contain the environment variables settings for the IAM service container. See the configuration reference for a description of the variables.\nThe IAM service is run starting the docker container with the following command:\n$ docker run \\  --name iam-login-service \\  --net=iam -p 8080:8080 \\  --env-file=/path/to/iam-login-service/env \\  -v /path/to/keystore.jks:/keystore.jks:ro \\  indigoiam/iam-login-service:v1.7.0 Check the logs with:\n$ docker logs -f iam-login-service ","excerpt":"The IAM service is provided on the following DockerHub repositories: …","ref":"/v/v1.7.0/docs/getting-started/docker/","title":"Deployment with Docker"},{"body":"Backup The IAM data that needs to saved by a backup is:\n database data; service configuration, typically maintained in an environment file: /etc/sysconfig/iam-login-service on CentOS, /etc/default/iam-login-service on Ubuntuu; the keystore used to sign JWT tokens: /var/lib/indigo/iam-login-service/keystore.jks; the SAML keystore, used when SAML authentication is enabled: /var/lib/indigo/iam/iam-login-service/example.ks.  The above locations apply when installing from packages on CentOS or Ubuntu.\nAn example of backup script is given below:\ntimestamp=`date +'%Y-%m-%d_%H%M%S'` MYSQL_HOST=\"mydbhost\" MYSQL_USER=\"iamloginserviceuser\" MYSQL_PWD=\"iamloginservicepassword\" MYSQL_DBNAME=\"iamloginservicedb\" MYSQL_DUMP_OPTS=\"-u ${MYSQL_USER}-p${MYSQL_PWD}--host ${MYSQL_HOST}\" dumpfile=iam_dump.sql mysqldump ${MYSQL_DUMP_OPTS} ${MYSQL_DBNAME} \u003e ${dumpfile} tar czf iam_backup.tar.gz \\  ${dumpfile} \\  /etc/sysconfig/iam-login-service \\  /var/lib/indigo/iam-login-service/keystore.jks \\  /var/lib/indigo/iam/iam-login-service/example.ks The keystore paths can be customized, so adapt the backup script according your configuration.\nIf you are deploying IAM with Docker and use a volume to provide configuration to the service, backup the contents of such volume.\nRestore From the backup, import the database data from the SQL dump:\n$ export MYSQL_HOST=\"mydbhost\" $ export MYSQL_USER=\"iamloginserviceuser\" $ export MYSQL_PWD=\"iamloginservicepassword\" $ export MYSQL_DBNAME=\"iamloginservicedb\" $ mysql --host ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PWD} ${MYSQL_DBNAME} \u003c iam_backup/iam_dump.sql Deployment from packages To restore the IAM service from scratch, install the package.\nOn CentOS:\n$ sudo yum install -y iam-login-service Restore the environment file.\nOn CentOS:\n$ sudo cp iam_backup/etc/sysconfig/iam-login-service /etc/sysconfig/iam-login-service On Ubuntu:\n$ sudo cp iam_backup/etc/default/iam-login-service /etc/default/iam-login-service Copy the keystores in the correct path, according to your configuration:\n$ sudo cp iam_backup/var/lib/indigo/iam-login-service/keystore.jks /var/lib/indigo/iam-login-service/keystore.jks $ sudo cp iam_backup/var/lib/indigo/iam/iam-login-service/example.ks /var/lib/indigo/iam/iam-login-service/example.ks Ensure the keystores have the right ownership:\n$ sudo chown -R iam:iam /var/lib/indigo/iam-login-service Start the IAM Login Service daemon:\n$ sudo systemctl start iam-login-service Deployment with Docker Copy the files from the backup to the volume location:\n$ cp iam_backup/iam-login-service/env /path/to/iam-login-service/env $ cp iam_backup/keystore.jks /path/to/keystore.jks Start the container:\n$ docker run \\  --name iam-login-service \\  --net=iam -p 8080:8080 \\  --env-file=/path/to/iam-login-service/env \\  -v /path/to/keystore.jks:/keystore.jks:ro \\  indigoiam/iam-login-service:latest ","excerpt":"Backup The IAM data that needs to saved by a backup is:\n database …","ref":"/v/v1.7.0/docs/tasks/deployment/backup_restore/","title":"Backup \u0026 Restore"},{"body":"IAM can be deployed from packages on the CentOS 7 platform. Packages and repo files are hosted on the INDIGO IAM package repository.\nWarning We no longer maintain packages for the Ubuntu platform.  CENTOS 7  Install the INDIGO IAM release key:  $ sudo rpm --import https://indigo-iam.github.io/repo/gpgkeys/indigo-iam-release.pub.gpg Install the repo files:  $ sudo yum-config-manager --add-repo https://indigo-iam.github.io/repo/repofiles/rhel/indigoiam-stable-el7.repo Install packages:  $ sudo yum makecache $ sudo yum install -y iam-login-service IAM service configuration The IAM service is configured via a configuration file named iam-login-service which holds the settings for the environment variables that drive its configuration (as described in the configuration reference section).\nThe file is located in the following path:\n/etc/sysconfig/iam-login-service Run the service The IAM login service is managed by systemd.\nTo enable the service use the following command:\n$ sudo systemctl enable iam-login-service To start the service use the following command:\n$ sudo systemctl start iam-login-service To access the service logs, use the following command:\n$ sudo journalctl -fu iam-login-service Automated provisioning with Puppet The IAM login service Puppet module can be found here. The module configures the IAM Login Service packages installation, configuration and the automatic generation of the JWK keystore.\nThe setup of the MySQL database used by the service as well as the setup of the reverse proxy are not covered by this module.\nHowever, the module provides an example of setup of both the Login Service and NginX as reverse proxy, using the official NginX Puppet module.\nFor more detailed information about the Indigo IAM Puppet module usage, see the documentation in the Github repository.\n","excerpt":"IAM can be deployed from packages on the CentOS 7 platform. Packages …","ref":"/v/v1.7.0/docs/getting-started/packages/","title":"Deployment with packages"},{"body":"Starting with version 1.6.0, IAM introduces support for basic account life cycle management.\nIt’s now possible to set an expiration time for IAM accounts. Once the account expires, login for the account is disabled.\nIAM can be configured to remove expired accounts after a configurable grace period.\nAccount end time settings By default, accounts in IAM do not have an end time set, i.e. the lifetime is unbounded.\nA default account validity period (e.g., 12 months) can be configured and will be set for users at registration time.\nThe relevant settings are managed by placing lifecycle directives in a custom configuration file:\nlifecycle:account:account-lifetime-days:365## 0 means unbounded validityread-only-end-time:false## When true, the end time cannot be changed from IAM APIs and dashboardexpired-account-policy:suspension-grace-period-days:7## Accounts will be suspended after 7 days since expirationremove-expired-accounts:false## When false, expired accounts are not removedremoval-grace-period-days:30## Accounts will be removed after 30 days since expiration (if remove-expired-accounts is true)expired-accounts-task:cron-schedule:0*/5****## spring cron schedule for the lifecycle task (default setting is every 5 mins)enabled:true## To disable automatic account expiration set this to false","excerpt":"Starting with version 1.6.0, IAM introduces support for basic account …","ref":"/v/v1.7.0/docs/reference/configuration/lifecycle/","title":"Membership lifecycle"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/reference/","title":"Reference"},{"body":"IAM implements a basic registration service that implements an administrator-vetted registration flow, where users apply for membership in an organization and administrators are asked to validate membership requests.\nRequiring external authentication Starting with version 1.6.0, IAM allows to request that users are authenticated from a trusted identity provider (SAML or OIDC) in order to apply for membership. It’s also possible to control how information in authentication tokens and assertions is mapped to IAM registration fields.\nFor example, see the following fragment that requires authentication with the CERN SSO and defines how information from identity tokens issued by CERN SSO is mapped to IAM membership information\niam:registration:require-external-authentication:trueoidc-issuer:https://auth.cern.ch/auth/realms/cernauthentication-type:oidcfields:name:read-only:true# When false, allows user to override what comes from the authentication informationexternal-auth-attribute:given_namesurname:read-only:trueexternal-auth-attribute:family_nameemail:read-only:falseexternal-auth-attribute:emailusername:read-only:falseexternal-auth-attribute:preferred_usernameUser editable fields Starting with version 1.6.0, IAM allows to limit which fields of the user profile are editable by users.\nThe default, backward-compatible settings that allow users to edit all their profile fields are defined as follows:\niam:user-profile:editable-fields:- email- name- picture- surnameTo prevent modifications to any of the fields remove the field name from editable-fields list.\nExternal configuration can be managed by placing directives as shown above in a custom configuration file.\n","excerpt":"IAM implements a basic registration service that implements an …","ref":"/v/v1.7.0/docs/reference/configuration/registration/","title":"Registration \u0026 Enrollment"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/tasks/","title":"Tasks"},{"body":"Most configurable aspects of the IAM are configured via environment variables and Spring profile directives. For a detailed reference of all the options, see the configuration reference.\nAt the bare minimum you should enable the registration service to let users register at your organisation (but you can leave it disabled and add users manually to the organisation using the IAM dashboard if you prefer).\nA minimal example configuration is given below:\nIAM_JAVA_OPTS=-Dspring.profiles.active=prod,registration -Djava.security.egd=file:/dev/./urandom IAM_HOST=iam.local.io IAM_BASE_URL=https://iam.local.io IAM_ISSUER=https://iam.local.io IAM_USE_FORWARDED_HEADERS=true IAM_KEY_STORE_LOCATION=file:/iam-keystore.jwks IAM_DB_HOST=db IAM_DB_NAME=iam IAM_DB_USERNAME=iam IAM_DB_PASSWORD=*********** IAM_NOTIFICATION_FROM=iam@iam.local.io IAM_NOTIFICATION_ADMIN_ADDRESS=iam-administrators@mail.example IAM_MAIL_HOST=smtp.mail.example and has the following meaning:\n IAM_JAVA_OPTS is used to select active profiles (prod, registration) and tell the JVM to use /dev/urandom as the random number generator; IAM_HOST is the host where the IAM will listen for request; this is the hostname of the machine exposed to the internet; IAM_BASE_URL is the base URL where the IAM web application will live; the value for this is typically https://${IAM_HOST}; IAM_ISSUER is the OpenID-connect issuer for the tokens issued by the IAM; we recommend using the same setting as IAM_BASE_URL, i.e. https://${IAM_HOST}; IAM_USE_FORWARDED_HEADERS tells the IAM that whether it lives behind a reverse proxy (i.e., NGINX); in production the value is typically true; IAM_KEY_STORE_LOCATION is the location of the JSON Web keystore generated as explained here; IAM_DB_* are variables used to set the database endpoint and provide database access credentials; IAM_NOTIFICATION_FROM sets the sender of administrative notification sent by the IAM; IAM_NOTIFICATION_ADMIN_ADDRESS sets the email address that will receive administrative notifications from the IAM; IAM_MAIL_HOST is the SMTP server that IAM will use to deliver notifications.  For a detailed reference of all available configuration options, see the configuration reference.\nDeploying and starting the IAM service with the above configuration will give you an empty service with just one user registered, the admin user.\nWarning As a first thing you should login in the IAM with the following credentials:\n username: admin password: password   and change the password for the admin user, clicking on the Change password button from the admin home page, as shown in the following picture:\n","excerpt":"Most configurable aspects of the IAM are configured via environment …","ref":"/v/v1.7.0/docs/getting-started/basic_setup/","title":"Basic IAM setup"},{"body":"Starting with version 1.6.0, IAM introduces the ability to limit or disable authentication with local IAM credentials, so that external, brokered authentication is required.\nIt’s possible to hide the local login form from the IAM login page and also to control for which users local authentication is enabled (all users, VO administrators, no users).\niam:local-authn:# possible values for enabled-for: all, vo-admins, noneenabled-for:vo-admins # possible values: hidden, visiblelogin-page-visibility:hidden Local authentication settings are configured providing a custom configuration file, as described here.\n","excerpt":"Starting with version 1.6.0, IAM introduces the ability to limit or …","ref":"/v/v1.7.0/docs/reference/configuration/local_authn/","title":"Local authentication"},{"body":"IAM Login Service traces interesting, security related events with an audit log.\nAudit log messages are marked with the tag AUDIT in the Java class name field.\nAn example of audit log message is the following:\n2017-09-11 09:58:14.560 INFO 13 --- [o-8080-exec-311] AUDIT : {\"@type\":\"IamAuthenticationSuccessEvent\",\"timestamp\":1505116694560,\"category\":\"AUTHENTICATION\",\"principal\":\"794fb313-6e93-4d02-9d0a-4ed773ee2c5e\",\"message\":\"794fb313-6e93-4d02-9d0a-4ed773ee2c5e authenticated succesfully\",\"sourceEvent\":{\"principal\":\"794fb313-6e93-4d02-9d0a-4ed773ee2c5e\",\"type\":\"InteractiveAuthenticationSuccessEvent\"},\"source\":\"UsernamePasswordAuthenticationToken\"} The IAM login service writes logs to standard output in the default configuration. When deployed from packages, all logs are collected by the system journal.\n","excerpt":"IAM Login Service traces interesting, security related events with an …","ref":"/v/v1.7.0/docs/tasks/deployment/audit-log/","title":"Audit log"},{"body":"IAM build requirements The IAM is a Spring Boot Java application.\nTo build it, you will need:\n Java 8 Maven 3.3.x or greater Git  Checking out the IAM code You can check out the IAM code as follows:\ngit clone https://github.com/indigo-iam/iam.git Building the IAM You can build the IAM packages with the following command:\nmvn package Setting up the docker-based development environment You will need:\n Docker 1.11.1 or greater Docker compose 1.7 or greater  You can start a development/testing environment with the following command:\n docker-compose build docker-compose up The docker-compose.yml file requires that you set some environment variables for it to run properly, mainly to provide OAuth client credentials for external authentication mechanisms (Google).\nThe setup also assumes that you have an entry in your DNS server (complex) or /etc/hosts (simpler) that maps iam.local.io to the machine (or VM) where docker is running, e.g.:\n$ cat /etc/hosts ... 192.168.99.100 iam.local.io How to run tests against the mysql database IAM JUnit integration tests can (and should) be run against mysql database.\nTo do so, boostrap the database instance with docker-compose:\ndocker-compose up db And then run the tests with the following command:\nmvn -Dspring.profiles.active=mysql-test test Building Docker production images To build the docker images for the iam-service and iam-test client, use the following commands:\nsh iam-login-service/docker/build-prod-image.sh sh iam-test-client/docker/build-prod-image.sh These commands should run after war and jar archives have been built, i.e. after a mvn package.\nFor more details on the image build scripts see the following folders:\n iam-login-service iam-test-client  Related projects This project builds upon the following projects/technologies:\n Spring Boot MitreID OpenID-Connect client and server libraries  ","excerpt":"IAM build requirements The IAM is a Spring Boot Java application.\nTo …","ref":"/v/v1.7.0/docs/developer-guide/","title":"Developer guide"},{"body":"for IAM v1.7.0\n","excerpt":"for IAM v1.7.0\n","ref":"/v/v1.7.0/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/v/v1.7.0/blog/news/","title":"News"},{"body":"","excerpt":"","ref":"/v/v1.7.0/blog/releases/","title":"Releases"},{"body":"INFN provides IAM as a service to partner research communities. In this scenario, a dedicated IAM instance is deployed on the INFN infrastructure and configured according to the community needs.\nINFN takes care of keeping the service operational and up-to-date, while administrative control on the IAM instance is granted to the community.\nThe following IAM deployments are examples of IAM deployed as a service for partner communities:\n  DODAS: The Dynamic On-Demand Analysis Service (DODAS) allows to instantiate on-demand container-based clusters. Both HTCondor batch systems, and platforms for Big Data analysis based for example on Spark or Hadoop, can be deployed on any cloud-based infrastructures with almost zero effort.\n  eXtreme Datacloud project: The eXtreme DataCloud project (XDC) project aims at developing scalable technologies for federating storage resources and managing data in highly distributed computing environments, as required by the most demanding, data intensive research experiments in Europe and worldwide.\n  How to access the service To request the deployment of an IAM service instance for your community, write to our support list.\n","excerpt":"INFN provides IAM as a service to partner research communities. In …","ref":"/v/v1.7.0/docs/iam-aas/","title":"IAM as a service"},{"body":"This section provides instructions to upgrade the IAM service to the latest available version.\nDeployment from packages Stop the service:\n$ systemctl stop iam-login-service Update the package:\n$ yum update -y iam-login-service Restart the service:\n$ systemctl start iam-login-service Deployment with Docker Stop and remove the running container:\n$ docker stop iam-login-service $ docker rm iam-login-service Pull the latest image:\n$ docker pull indigoiam/iam-login-service:latest Restart the container:\n$ docker run \\  --name iam-login-service \\  --net=iam -p 8080:8080 \\  --env-file=/path/to/iam-login-service/env \\  -v /path/to/keystore.jks:/keystore.jks:ro \\  indigoiam/iam-login-service:latest Otherwise, you can specify the exact tag version. For example, if the latest tag is v1.1.0-latest:\n$ docker run \\  --name iam-login-service \\  --net=iam -p 8080:8080 \\  --env-file=/path/to/iam-login-service/env \\  -v /path/to/keystore.jks:/keystore.jks:ro \\  indigoiam/iam-login-service:v1.1.0-latest ","excerpt":"This section provides instructions to upgrade the IAM service to the …","ref":"/v/v1.7.0/docs/tasks/deployment/upgrade/","title":"Upgrade"},{"body":"The new IAM website is almost up (still WIP).\n","excerpt":"The new IAM website is almost up (still WIP).\n","ref":"/v/v1.7.0/blog/2021/07/30/new-iam-website/","title":"New IAM website!"},{"body":"","excerpt":"","ref":"/v/v1.7.0/blog/","title":"INDIGO IAM Blog"},{"body":"Once logged in, you can change information in your account (if allowed by the IAM configuration) by clicking the “Edit Details” from your home page:\n","excerpt":"Once logged in, you can change information in your account (if allowed …","ref":"/v/v1.7.0/docs/tasks/user/change-details/","title":"Change account information"},{"body":"Once logged in you can change your account password by clicking on the “Change password” button in your home page:\nNote that the “Change password” functionality is only useful if you remember your IAM account password. In case you forgot it, logout from the IAM and follow the instructions in the Reset account password section.\n","excerpt":"Once logged in you can change your account password by clicking on the …","ref":"/v/v1.7.0/docs/tasks/user/change-password/","title":"Changing the account password"},{"body":"IAM supports brokered authentication via standard OpenID-Connect and SAML protocols as well as X.509 authentication.\n","excerpt":"IAM supports brokered authentication via standard OpenID-Connect and …","ref":"/v/v1.7.0/docs/reference/configuration/external-authentication/","title":"External authentication"},{"body":"IAM Login Service provides a RESTful API to create and manage group membership requests.\nPOST /iam/group_requests Create a new group membership request. The body of the request must contain a JSON with the group name and a motivation of the submitted request.\nAuthentication required: true\nSuccess response Conditions:\n The user is authenticated; the user is not already member of the requested group; a request from the user for such group does not exist.  Code: 200 Ok\nContent: A JSON representation of the new request.\nError response Condition: The user is not authenticated.\nCode: 401 Unauthorized\nContent: A JSON with the error description.\n{ \"error\" : \"unauthorized\", \"error_description\" : \"Full authentication is required to access this resource\" } Condition: The request already exists.\nCode: 400 Bad Request\nContent: A JSON with the error description.\n{ \"error\": \"Group membership request already exist for [test, Test-001]\" } Example Request:\nPOST /iam/group_requests HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache { \"groupName\":\"Test-001\", \"notes\":\"Test API\" } Response:\n{ \"uuid\": \"d5b652b2-4bb5-401a-bfb9-a795353798b3\", \"username\": \"test\", \"status\": \"PENDING\", \"notes\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524233011676 } GET /iam/group_requests Returns a paginated list of group requests. The list can be filtered by username, group name or request status. Users with administrative privileges can list all requests; other users only the requests they submitted.\nAuthentication required: true\nSuccess response Condition: The user is authenticated.\nCode: 200 Ok\nContent: A JSON representation of the request list.\nError response Condition: The user is not autheticated.\nCode: 401 Unauthorized\nContent: A JSON with an error message representation.\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } Example Request:\nGET /iam/group_requests/?groupName=Test-001\u0026status=PENDING HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache Response:\n{ \"Resources\": [ { \"uuid\": \"d5b652b2-4bb5-401a-bfb9-a795353798b3\", \"username\": \"test\", \"status\": \"PENDING\", \"notes\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524233011000, \"lastUpdateTime\": 1524233012000 }, { \"uuid\": \"b28790d4-90d4-471f-8b85-79d5fd761b8c\", \"username\": \"test_100\", \"status\": \"PENDING\", \"notes\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524237532000, \"lastUpdateTime\": 1524237532000 } ], \"totalResults\": 2, \"startIndex\": 1, \"itemsPerPage\": 2 } GET /iam/group_requests/{uuid} Returns the details about a group request.\nAuthentication required: true\nSuccess response Condition: The user is authenticated and can access the request (privileged users can access all request, other users only the requests they submitted).\nCode: 200 Ok\nContent: The JSON representation of the group membership request.\nError response Condition: The user is not authenticated.\nCode: 401 Unauthorized\nContent:\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } Condition: User is not authorized to access the group request.\nCode: 403 Forbidden\nContent:\nAccess is denied Condition: A request linked to the given id does not exist.\nCode: 400 Bad request\nContent:\n{ \"error\": \"Group request with UUID [d5b652b2-4bb5-401a] does not exist\" } Example Request:\nGET /iam/group_requests/d5b652b2-4bb5-401a-bfb9-a795353798b3 HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache Response:\n{ \"uuid\": \"d5b652b2-4bb5-401a-bfb9-a795353798b3\", \"username\": \"test\", \"status\": \"PENDING\", \"notes\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524233011000, \"lastUpdateTime\": 1524233012000 } DELETE /iam/group_requests/{uuid} Deletes a group request. Administrators can delete any request, users can only delete the PENDING requests they previously submitted.\nAuthentication required: true\nSuccess response Condition: A request linked to the given id exists.\nCode: 204 No Content\nContent: Empty body\nError response Condition: A request linked to the given id does not exist.\nCode: 400 Bad Request\nContent: A JSON with an error message representation.\n{ \"error\": \"Group request with UUID [b28790d4-90d4-471f-8b85-79d5fd761b8c] does not exist\" } Example Request:\nDELETE /iam/group_requests/b28790d4-90d4-471f-8b85-79d5fd761b8c HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache POST /iam/group_requests/{uuid}/approve Approves a group request. Only administrators can approve requests.\nAuthentication required: true\nSuccess response Condition:\n The user is authenticated and has administrative privileges; the request is in PENDING status.  Code: 200 Ok\nContent: The JSON representation of the updated group membership request.\nError response Condition:\n The request doesn’t exist; The request isn’t in PENDING status.  Code: 400 Bad Request\nContent: A JSON with an error message representation.\n{ \"error\": \"Group request with UUID [b28790d4-90d4-471f-8b85-79d5fd761b8c] does not exist\" } { \"error\": \"Invalid group request transition: APPROVED -\u003e APPROVED\" } Example Request:\nPOST /iam/group_requests/d5b652b2-4bb5-401a-bfb9-a795353798b3/approve HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache Response:\n{ \"uuid\": \"d5b652b2-4bb5-401a-bfb9-a795353798b3\", \"username\": \"test\", \"status\": \"APPROVED\", \"notes\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524233011000, \"lastUpdateTime\": 1524238898590 } POST /iam/group_requests/{uuid}/reject Rejects a group request. A motivation parameter is required. Only administrators can reject requests.\nAuthentication required: true\nSuccess response Condition:\n The user is authenticated and has administrative privileges; the request is in PENDING status.  Code: 200 Ok\nContent: The JSON representation of the updated group membership request.\nError response Condition:\n The request doesn’t exist; The request isn’t in PENDING status; The motivation required request parameter is missing.  Code: 400 Bad Request\nContent: A JSON with an error message representation.\n{ \"error\": \"Invalid group request transition: APPROVED -\u003e REJECTED\" } { \"error\": \"Group request with UUID [d5b652b2-4bb5-401a-bfb9-a79535379b3] does not exist\" } Example Request:\nPOST /iam/group_requests/b28790d4-90d4-471f-8b85-79d5fd761b8c/reject?motivation=Test API HTTP/1.1 Host: iam.local.io Content-Type: application/json Cache-Control: no-cache Response:\n{ \"uuid\": \"b28790d4-90d4-471f-8b85-79d5fd761b8c\", \"username\": \"test_100\", \"status\": \"REJECTED\", \"notes\": \"Test API\", \"motivation\": \"Test API\", \"groupName\": \"Test-001\", \"creationTime\": 1524237532000, \"lastUpdateTime\": 1524238811254 } ","excerpt":"IAM Login Service provides a RESTful API to create and manage group …","ref":"/v/v1.7.0/docs/reference/api/group-requests/","title":"Group requests API"},{"body":"The IAM Login Service exposes a set of health endpoints that can be used to monitor the status of the service.\nHealth endpoints expose a different set of information depending on the user privileges; users with administrator privileges will see more details, while anonymous requests typically receive only a summary of the health status.\nThe health endpoints return:\n HTTP status code 200 if everything is ok; HTTP status code 500 if any health check fails.  /health This is a general application health check endpoint which composes disk space and database health checks.\nExamples.\n$ curl -s https://iam.local.io/health | jq { \"status\": \"UP\" } Sending basic authentication, the endpoint returns a response with more details:\n$ curl -s -u $ADMINUSER:$ADMINPASSWORD https://iam.local.io/health | jq { \"status\": \"UP\", \"diskSpace\": { \"status\": \"UP\", \"total\": 10725883904, \"free\": 9872744448, \"threshold\": 10485760 }, \"db\": { \"status\": \"UP\", \"database\": \"MySQL\", \"hello\": 1 } } /health/mail This endpoint monitors the connection to the SMTP server configured for the IAM Notification Service.\n$ curl -s https://iam.local.io/health/mail | jq { \"status\": \"UP\" } With an authenticated request, the SMTP server details are returned:\n$ curl -u $ADMINUSER:$ADMINPASSWORD https://iam.local.io/health/mail | jq { \"status\": \"UP\", \"mail\": { \"status\": \"UP\", \"location\": \"smtp.local.io:25\" } } /health/external This endpoint checks service connectivity to the Internet. By default, the endpoint triggers a check on the connectivity to Google.\n$ curl -s https://iam.local.io/health/external | jq { \"status\": \"UP\" } With an authenticated request, the external service URL is shown in the details.\n$ curl -s -u $ADMINUSER:$ADMINPASSWORD https://iam.local.io/health/external | jq { \"status\": \"UP\", \"google\": { \"status\": \"UP\", \"location\": \"http://www.google.it\" } } ","excerpt":"The IAM Login Service exposes a set of health endpoints that can be …","ref":"/v/v1.7.0/docs/reference/api/health_endpoints/","title":"Health checks"},{"body":"The IAM server has a RESTful API used to list and revoke active access and refresh tokens.\nAccess to the API is limited to users with administrator privileges (either authenticated via a web session or through OAuth). All examples assume authorization via OAuth2 bearer token; e.g.\nGET /access-tokens/13 HTTP/1.1 Host: example.com Authorization: Bearer h480djs93hd8 These are the tokens REST API endpoints:\nAccessing tokens:\n GET /access-tokens GET /access-tokens/:id GET /refresh-tokens GET /refresh-tokens/:id  Deleting tokens:\n DELETE /access-tokens/:id DELETE /refresh-tokens/:id  GET /access-tokens Retrieves the paginated list of all the active access tokens. Returns results in application/json.\nRequires ROLE_ADMIN.\nParameters:\n   Name Description     countinteger Specifies the desired maximum number of query results per page.   startIndexinteger The 1-based index of the first query result.   userIdstring Filters by userId.   clientIdstring Filters by clientId.    Example:\nGET http://example.com:8080/access-tokens { \"totalResults\": 1, \"itemsPerPage\": 1, \"startIndex\": 1, \"resources\": [ { \"id\": 6, \"value\": \"eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjE0MDEzMTQ1MjksImF1ZCI6WyJhOGFmNzUzYy1mMzI0LTRlNDAtYTE3Ny04N2RmYzA2MjQ5YjciXSwiaXNzIjoiaHR0cDpcL1wvbG9jYWxob3N0OjgwODBcL29wZW5pZC1jb25uZWN0LXNlcnZlci13ZWJhcHBcLyIsImp0aSI6Ijg4ZjM4OGE4LTk1NzctNGQyMC1hZTZjLWMyMDMxOGQ1OWJjNiIsImlhdCI6MTQwMTMxMDkyOX0.HYnNxRvGRdKFykVChL-hdxszcFBvygkeUmc8_iv2Jl4MU-jPJVzMnTwKJbCMWBjeBp8hrb0Dgd9XbnHUDyXxwj8MDrWQEH3QnwYJGRW9JFWjHMGfKDQDFY6Ffl3OFERVbyoB2ObiGTUgbw4Nkl1L1ihuMpMAc5nKi0rk3QXcS1M\", \"scopes\": [ \"openid\", \"phone\", \"email\", \"address\", \"profile\" ], \"expiration\": \"2014-05-28T18:02:09-0400\", \"client\": { \"id\": 2, \"clientId\": \"iam-test-client\", \"contacts\": [ \"andrea.ceccanti@cnaf.infn.it\" ], \"ref\": \"https://iam-test.indigo-datacloud.eu/api/clients/2\" }, \"user\": { \"id\": \"e1eb758b-b73c-4761-bfff-adc793da409c\", \"userName\": \"andrea\", \"ref\": \"https://iam-test.indigo-datacloud.eu/scim/Users/e1eb758b-b73c-4761-bfff-adc793da409c\" }, \"idToken\": { \"id\": 5, \"ref\": \"https://iam-test.indigo-datacloud.eu/access-tokens/5\" } } ] } GET /access-tokens/:id Retrieves all the information about the access token identified by id and returns results in application/json.\nRequires ROLE_ADMIN.\nGET http://example.com:8080/access-tokens/6 { \"id\": 6, \"value\": \"eyJhbGciOiJSUzI1NiJ9.eyJleHAiOjE0MDEzMTQ1MjksImF1ZCI6WyJhOGFmNzUzYy1mMzI0LTRlNDAtYTE3Ny04N2RmYzA2MjQ5YjciXSwiaXNzIjoiaHR0cDpcL1wvbG9jYWxob3N0OjgwODBcL29wZW5pZC1jb25uZWN0LXNlcnZlci13ZWJhcHBcLyIsImp0aSI6Ijg4ZjM4OGE4LTk1NzctNGQyMC1hZTZjLWMyMDMxOGQ1OWJjNiIsImlhdCI6MTQwMTMxMDkyOX0.HYnNxRvGRdKFykVChL-hdxszcFBvygkeUmc8_iv2Jl4MU-jPJVzMnTwKJbCMWBjeBp8hrb0Dgd9XbnHUDyXxwj8MDrWQEH3QnwYJGRW9JFWjHMGfKDQDFY6Ffl3OFERVbyoB2ObiGTUgbw4Nkl1L1ihuMpMAc5nKi0rk3QXcS1M\", \"scopes\": [ \"openid\", \"phone\", \"email\", \"address\", \"profile\" ], \"expiration\": \"2014-05-28T18:02:09-0400\", \"client\": { \"id\": 2, \"clientId\": \"iam-test-client\", \"contacts\": [ \"andrea.ceccanti@cnaf.infn.it\" ], \"ref\": \"https://iam-test.indigo-datacloud.eu/api/clients/2\" }, \"user\": { \"id\": \"e1eb758b-b73c-4761-bfff-adc793da409c\", \"userName\": \"andrea\", \"ref\": \"https://iam-test.indigo-datacloud.eu/scim/Users/e1eb758b-b73c-4761-bfff-adc793da409c\" }, \"idToken\": { \"id\": 5, \"ref\": \"https://iam-test.indigo-datacloud.eu/access-tokens/5\" } } GET /refresh-tokens Retrieves the paginated list of all the active refresh tokens. Returns results in application/json.\nRequires ROLE_ADMIN.\nParameters:\n   Name Description     countinteger Specifies the desired maximum number of query results per page.   startIndexinteger The 1-based index of the first query result.   userIdstring Filters by userId.   clientIdstring Filters by clientId.    Example:\nGET http://example.com:8080/refresh-tokens { \"totalResults\": 1, \"itemsPerPage\": 1, \"startIndex\": 1, \"resources\": [ { \"id\": 1083, \"value\": \"eyJhbGciOiJub25lIn0.eyJqdGkiOiIxMTdmMWRkOS1iOWViLTQ5MjctYThkMS1hYzQ4NjIwYWQzOWYifQ.\", \"scopes\": [ \"openid\", \"phone\", \"email\", \"address\", \"profile\" ], \"expiration\": \"2014-05-28T18:02:09-0400\", \"client\": { \"id\": 2, \"clientId\": \"iam-test-client\", \"contacts\": [ \"andrea.ceccanti@cnaf.infn.it\" ], \"ref\": \"https://iam-test.indigo-datacloud.eu/api/clients/2\" }, \"user\": { \"id\": \"e1eb758b-b73c-4761-bfff-adc793da409c\", \"userName\": \"andrea\", \"ref\": \"https://iam-test.indigo-datacloud.eu/scim/Users/e1eb758b-b73c-4761-bfff-adc793da409c\" } } ] } GET /refresh-tokens/:id Retrieves all the information about the refresh token identified by id and returns results in application/json.\nRequires ROLE_ADMIN.\nGET http://example.com:8080/refresh-tokens/1083 { \"id\": 1083, \"value\": \"eyJhbGciOiJub25lIn0.eyJqdGkiOiIxMTdmMWRkOS1iOWViLTQ5MjctYThkMS1hYzQ4NjIwYWQzOWYifQ.\", \"scopes\": [ \"openid\", \"phone\", \"email\", \"address\", \"profile\" ], \"expiration\": \"2014-05-28T18:02:09-0400\", \"client\": { \"id\": 2, \"clientId\": \"iam-test-client\", \"contacts\": [ \"andrea.ceccanti@cnaf.infn.it\" ], \"ref\": \"https://iam-test.indigo-datacloud.eu/api/clients/2\" }, \"user\": { \"id\": \"e1eb758b-b73c-4761-bfff-adc793da409c\", \"userName\": \"andrea\", \"ref\": \"https://iam-test.indigo-datacloud.eu/scim/Users/e1eb758b-b73c-4761-bfff-adc793da409c\" } } DELETE /access-tokens/:id Revoke the access token identified by id.\nRequires ROLE_ADMIN.\nDELETE http://example.com:8080/access-tokens/6 204 AccessToken revoked DELETE /refresh-tokens/:id Revoke the access token identified by id.\nRequires ROLE_ADMIN.\nDELETE http://example.com:8080/refresh-tokens/1083 204 RefreshToken revoked More details can be read at the complete API Reference.\n","excerpt":"The IAM server has a RESTful API used to list and revoke active access …","ref":"/v/v1.7.0/docs/reference/api/tokens-api/","title":"IAM Token management API"},{"body":" Welcome to the INDIGO IAM service website! The open source, self-contained Identity And Access Management (IAM) solution for Scientific computing!\nLearn More          ","excerpt":" Welcome to the INDIGO IAM service website! The open source, …","ref":"/v/v1.7.0/","title":"INDIGO IAM"},{"body":"A user can link an external account from the IAM dashboard (i.e., the user must be logged in the IAM service). The following sets of screenshots show the process followed to link a Google account.\nClicking on the “Link Google account” opens a confirmation dialog:\nWhen the user clicks on the Link, button is redirected to Google for authentication:\nAfter a succesfull authentication the user is redirected to the IAM page, and a confirmation dialog shows that the account was linked succesfully: Now the user can logout from the IAM and login using the Sign in with Google button.\nA similar process is implemented for SAML external accounts.\n","excerpt":"A user can link an external account from the IAM dashboard (i.e., the …","ref":"/v/v1.7.0/docs/tasks/user/external-account-linking/","title":"Linking an external account"},{"body":"IAM provides the ability to link X.509 certificates to a user account. X.509 account linking works if:\n X.509 certificate authentication is enabled for the IAM instance in use; for more information on this see the Getting started guide; The certificate is correctly installed in the browser used to access the IAM; The certificate is trusted by the IAM (i.e. is signed by a certificate authority known and trusted by the IAM)  Authenticating with an X.509 certificate If a certificate is correctly configured in the browser, the browser will show a dialog to select whether to authenticate with the certificate or not as in the following screenshot:\nNote that this happens when enstabilishing the connection to the IAM. If no dialog is shown, either:\n there’s no certificate in the browser that is trusted by the IAM (either the certificate is expired or signed by a CA not trusted by the IAM) a certificate was selected automatically by the browser when authenticating to the IAM  In case the certificate used for the authentication is linked to an organization account, the IAM login page will display a “Sign in with your certificate” button:\nLinking a certificate If a certificate was recognized but is not linked to any membership in the IAM, the user will have to authenticate with other credentials (local username \u0026 password, or external authentication mechanisms (e.g. Google)).\nAfter having logged in, the user can link a certificate by clickin on the Link Certificate button:\nNote that the Link certificate button will be shown in the page only if a valid and trusted certificate was detected by the IAM during the TLS handshake.\nClicking the Link certificate button opens a dialog that shows information about the certificate that should be linked to the account:\nIf the linking completes succesfully, the linked certificate information will be shown in the X.509 certificates panel:\nTo check that the linking actually works, the user can logout from the IAM and login again with the certificate.\nUnlinking a certificate A user can unlink a certificate by clicking on the Unlink button shown in the certificate panel (see the image above).\n","excerpt":"IAM provides the ability to link X.509 certificates to a user account. …","ref":"/v/v1.7.0/docs/tasks/user/x509-linking/","title":"Linking an X.509 certificate"},{"body":"You can see which access and refresh tokens bound to your identity are currently active from the MitreID dashboard following the “Manage Active Tokens” link:\n","excerpt":"You can see which access and refresh tokens bound to your identity are …","ref":"/v/v1.7.0/docs/tasks/user/manage-active-tokens/","title":"Managing active tokens"},{"body":"You can manage approved sites (i.e. sites and services that you approved when authenticating at the IAM) from the MitreID dashboard following the “Manage Approved Sites” link:\n","excerpt":"You can manage approved sites (i.e. sites and services that you …","ref":"/v/v1.7.0/docs/tasks/user/manage-approved-sites/","title":"Managing approved sites"},{"body":"The current release of the INDIGO IAM implements part of the Token Exchange OAuth specification. The Token Exchange OAuth specification defines “a lightweigth protocol that enables clients to request and obtain security tokens from authorization servers”.\nOAuth 2.0 was designed to solve the problem of a delegated access to resources across services, mediated by an authorization server, as shown in the following picture:\nIn the picture above we have the usual OAuth roles:\n The user (or resource owner, in OAuth terminology); A resource server, ie. a service hosting user resources, capable of accepting and responding to protected resource requests using access tokens. A client: this is an agent that has received a permission from the user to act on his behalf on his resources hosted on a resource server; An authorization server: a service that issues access token to clients after having authenticated the user and obtained an authorization from the user that the client is entitled to act on user’s resources  There are scenarios when a resource server, in order to satisfy a client request, needs to access resources hosted by other downstream services on behalf of the user, like in the following picture:\nIn OAuth, access tokens are bearer tokens, so the first resource server could simply use the access token received from the client to interact, on behalf of the user, with the downstream resource server.\nThere are, however, situations in which just using the received access token against the downstream service is not possible, like for instance if the token audience was scoped to be valid only on the first resource server.\nMoreover, the resource server could need the ability to act on behalf of the user for an unbounded amount of time (e.g., to implement long-running computations), not limited by the validity of the received access token.\nThe token exchange specification was designed to provide a protocol in support of these scenarios, where a client can exchange an access token received from antoher client with a new token (or a set of tokens, as we will see) by interacting with a trusted OAuth authorization server.\nImpersonation vs delegation As specified in the Token Exchange OAuth specification, when a subject A impersonates B, A has all the rights of B and it is indistinguishable from B. So, when A interacts within any other entity, A is B.\nWith delegation A still has its own identity, separate from B. So when A interacts within another entity, it is explicit that A is representing B, because B has delegated some of its rights to A.\nMore details about the difference from this two semantics can be found in this section of the specification.\nThe INDIGO IAM token exchange implementation currently supports only impersonation semantics.\nClient configuration requirements In order to request a token exchange, a client must be configured with the urn:ietf:params:oauth:grant-type:token-exchange grant type enabled. The token exchange grant type is disabled by default for dynamically registered clients, and can be enabled only by users with administrative privileges.\nThe token exchange request A client who wants to exchange an access token with a new one (or a couple of new tokens, in case a refresh token is requested), must send an authenticated request to the IAM /token endpoint, specifying the following properties:\n   Parameter Value     grant_type urn:ietf:params:oauth:grant-type:token-exchange   subject_token The subject access token that the client wants to exchange   scope The set of scopes requested for the new access token   audience Optional. A space-separated list of resource identifiers that will be used to limit the audience of the issued token    Scopes in exchanged tokens A client, when requesting a token exchange, can request any of the scopes enabled by its client configuration. IAM system scopes are however handled in a special way. These scopes, in order to be “exchanged” across clients, need to be\n enabled for the client requesting the token exchange linked to the subject token presented for the token exchange  The list of system scopes currently defined in the IAM can be obtained by registered users by issuing a request to the IAM system scopes API:\ncurl -H \"Authorization: Bearer ...\" https://iam.example/api/scopes Token Exchange example This section describes a token exchange flow.\nWe start with a normal OAuth flow where a client, token-exchange-subject, requests an access token from the IAM using the resource owner password credential flow. The token-exchange-subject client is configured to use HTTP basic authentication against the IAM token endpoint, and in this example acts on behalf of the test user. We use the resource owner password credentials flow for convenience, but any other OAuth or OpenID connect flow that involves a user identity would be fine (i.e., authorization code).\n$ export IAM_TOKEN_ENDPOINT=https://iam.local.io/token $ export SUBJECT_ID=token-exchange-subject $ export SUBJECT_SECRET=... $ export USERNAME=test $ export PASSWORD=... $ curl -s -u $SUBJECT_ID:$SUBJECT_SECRET \\  -d username=$USERNAME \\  -d password=$PASSWORD \\  -d grant_type=password \\  -d scope=\"openid profile\" \\  $IAM_TOKEN_ENDPOINT | tee /tmp/response | jq Note that the only scopes requested in this first request are openid and profile, i.e. the scopes required to access user identity information. IAM token endpoint returns a JSON containing an access token and other info:\n{ \"access_token\": \"eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhY2JjY2QwOC1kNzNkLTQxZjItODk3MS1iNjA4ZmNjNjYyNmQiLCJpc3MiOiJodHRwczpcL1wvaWFtLmxvY2FsLmlvXC8iLCJleHAiOjE0NzY5NTcxMDIsImlhdCI6MTQ3Njk1MzUwMiwianRpIjoiMjBiZThlNjYtNmNmOS00YzE0LWI4ZDEtZjJmZTc0NDk0YjAxIn0.kqAhZ2MNmBLYIA_-xW9356kD-ndqJ7jKUZRPb7ox_4iXbjcnV6oZYAHZzTH_uBTXA2WsVIJJ-Qicm5JQ0ydb2ewgECAmGkKfL3X4qnnRq2_GgZZof3zlM_rIz3QrDB3v1eIt42YeMdUgODUYGKeDwntT5a7wPDtxe-GM2uL5fik\", \"token_type\": \"Bearer\", \"expires_in\": 3599, \"scope\": \"openid profile\", \"id_token\": \"eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJhY2JjY2QwOC1kNzNkLTQxZjItODk3MS1iNjA4ZmNjNjYyNmQiLCJhdWQiOiIzMmMzMTUyOS05YmM2LTQ1ZWQtYjU0YS0wNGEyNThiMDRmYmYiLCJraWQiOiJyc2ExIiwiaXNzIjoiaHR0cHM6XC9cL2lhbS5sb2NhbC5pb1wvIiwiZXhwIjoxNDc2OTU0MTAyLCJpYXQiOjE0NzY5NTM1MDIsImp0aSI6IjhhMzk1OTM5LTM1N2QtNGY5My04MmEzLTJkMTBkM2ZhMzgzZCJ9.DtNR-ob8kMIUMa2x6TW7krSYMt78tfr5fnTK4aeoIY-wmEWcjPRx1_vT6_lesjMr9w0B_OCALXfOoDBfbF7DhmV7vpbotirkMxvowFBzgppmtBTZNAzLc_Wiwr4IAiGydwjy_UbYrxx6qlWJAKRwzSbDDd3oDVpU-KM8gtLIEa8\" } We put this access token in an environment variable:\n$ export SUBJECT_TOKEN=$(cat /tmp/response | jq -r .access_token) We use this access token to access the app API, which only requires access to user identity to grant access:\ncurl -H \"Authorization: Bearer $SUBJECT_TOKEN\" https://app.example.org/api Suppose now that the app API needs, to properly answer the request from the client, to interact with another downstream service, https://tasks.example.org, on behalf of the user. Unfortunately the set of scopes linked to the access token received are not sufficient to do this, and so app decides to exchange the token received with another one granting enough privileges.\nIn Token Exchange terms, here app is the actor, the subject identity linked to the token is the test user, and the audience for the new token being requested would be the https://tasks.app.example.org/api API.\nSo app would do a request like the following:\n$ export ACTOR_ID=https://app.example.org/api $ export ACTOR_SECRET=... $ export AUDIENCE=https://tasks.example.org/api $ curl -s -u $ACTOR_ID:$ACTOR_SECRET \\  -d grant_type=urn:ietf:params:oauth:grant-type:token-exchange \\  -d audience=$AUDIENCE \\  -d subject_token=$SUBJECT_TOKEN \\ # This token was received from the initial client  -d scope=\"openid profile read-tasks\" \\  $IAM_TOKEN_ENDPOINT | tee /tmp/response | jq Note that app requests an additional scope, read-tasks, to interact with the downstream service.\nSince app is a trusted client for token exchange, the IAM responds with the following JSON:\n{ \"access_token\": \"eyJra...\", \"token_type\": \"Bearer\", \"expires_in\": 3599, \"scope\": \"openid profile read-tasks\", \"issued_token_type\": \"urn:ietf:params:oauth:token-type:jwt\" } And app can use the newly issued access token to invoke services on https://task-app.example.org/api on behalf of user test:\n$ curl -H \"Authorization: Bearer eyJra...\" http://tasks.example.org/api Trust Clients that have the token exchange grant enabled are considered trusted clients i.e., no explicit grant from the user is needed to grant access to client scopes. For IAM system scopes, however, these can be “exchanged” only if linked to the original subject token.\nLimitation and known issues The current implementation of Token Exchange in Indigo IAM has the following limitations:\n Delegation is not yet supported: if actor_token or the want_composite parameters are specified within the request, an error response is returned by the authorization server; The resource field is ignored.  ","excerpt":"The current release of the INDIGO IAM implements part of the Token …","ref":"/v/v1.7.0/docs/reference/api/oauth-token-exchange/","title":"OAuth token exchange API"},{"body":"IAM, through the MitreID OpenID Connect server implementation, supports the OAuth token introspection API API at the /introspect endpoint.\nThe /introspect endpoint requires client authentication.\n","excerpt":"IAM, through the MitreID OpenID Connect server implementation, …","ref":"/v/v1.7.0/docs/reference/api/oauth-token-introspection/","title":"OAuth token introspection API"},{"body":"IAM, through the MitreID OpenID Connect server implementation, provides an OAuth/OpenID connect client management API at the /api/clients endpoint.\nDocumentation for this API can be found on the MitreID connect wiki.\n","excerpt":"IAM, through the MitreID OpenID Connect server implementation, …","ref":"/v/v1.7.0/docs/reference/api/oidc-client-management/","title":"OpenID Connect client management API"},{"body":"IAM, through the MitreID OpenID Connect server implementation, supports the OpenID Connect Dynamic Client Registration API API at the /register endpoint.\nClient registration does not require authentication.\nExample: registering and deleting a client from the command line With the following template JSON you can easily register a client in the IAM:\n{ \"redirect_uris\": [ \"https://another.client.example/oidc\" ], \"client_name\": \"another-example-client\", \"contacts\": [ \"test@iam.test\" ], \"token_endpoint_auth_method\": \"client_secret_basic\", \"scope\": \"address phone openid email profile offline_access\", \"grant_types\": [ \"refresh_token\", \"authorization_code\" ], \"response_types\": [ \"code\" ] } Save the above JSON into a file (after changing the relevant fields, like contact, rediret_uris, etc…). We will use the client-req.json file name for this example. You can then use httpie as follows to generate the client on the IAM\nhttp https://iam.local.io/register \u003c client-req.json \u003e client.json If the command terminates correctly, you will have the client configuration saved in the client.json file. You can use jq to display in a pretty way its contents:\n$ jq . client.json { \"client_id\": \"4b2556d7-65c5-4a15-81c0-7b80c604940e\", \"client_secret\": \"R4u3v-SUqKX1XTFQbGGr-S5qcOAA8JrLT0xAOHYZl1Up65ChHYNsl-8y6gv7qJLaxVI5Z6UXBmSkwSDZLtAAWw\", \"client_secret_expires_at\": 0, \"client_id_issued_at\": 1507223860, \"registration_access_token\": \"eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiI0YjI1NTZkNy02NWM1LTRhMTUtODFjMC03YjgwYzYwNDk0MGUiLCJpc3MiOiJodHRwczpcL1wvaWFtLmxvY2FsLmlvXC8iLCJpYXQiOjE1MDcyMjM4NjAsImp0aSI6IjRmNTQ2YmEyLWE3ZWEtNDA4ZC1iYWI1LTdlZGMyNDZlOWJhMiJ9.Iyr7fwKy3OSl3wVjaw5HVVxBFl62A-vDlrKJpJA2W2t1GmPMcz5ZZOhp9PStd2RbMpuu6WwVhhDMN706IOzk03dGD3wPy_ag2MaiJfdT0-AT2nMviuPNylgU4bK0wFs9r9cwxBI0PpJ5pkkQE__z_lfWHylKMf9mLrZp81WUvt8\", \"registration_client_uri\": \"https://iam.local.io/register/4b2556d7-65c5-4a15-81c0-7b80c604940e\", \"redirect_uris\": [ \"https://another.client.example/oidc\" ], \"client_name\": \"another-example-client\", \"contacts\": [ \"test@iam.test\" ], \"token_endpoint_auth_method\": \"client_secret_basic\", \"scope\": \"address phone openid email profile offline_access\", \"grant_types\": [ \"refresh_token\", \"authorization_code\" ], \"response_types\": [ \"code\" ] } and also to extract information from it conveniently from the command line. For example, you can extract the client_id and registration_access_token with the following commands:\n$ export CID=$(jq -r .client_id client.json) $ export RAT=$(jq -r .registration_access_token client.json) and use them to delete the client:\n$ http DELETE https://iam.local.io/register/${CID} Authorization:\"Bearer ${RAT}\" HTTP/1.1 204 No Content Access-Control-Allow-Origin: * Cache-Control: no-cache, no-store, max-age=0, must-revalidate Connection: keep-alive Content-Language: en-US Date: Thu, 05 Oct 2017 17:10:42 GMT Expires: 0 Pragma: no-cache Server: nginx/1.13.1 Strict-Transport-Security: max-age=31536000 ; includeSubDomains X-Application-Context: INDIGO IAM:mysql,google,registration,saml,mysql-test:8080 X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block ","excerpt":"IAM, through the MitreID OpenID Connect server implementation, …","ref":"/v/v1.7.0/docs/reference/api/oidc-client-registration/","title":"OpenID Connect client registration API"},{"body":"This privacy policy will explain how INFN uses the personal data collected from users for the erogation of the INDIGO IAM service.\nWhat data do we collect? The following personal information is collected and managed by the IAM service:\n Personal identitifcation information (Name,email address,phone number, affiliation) Unique ID used to identify the user when authenticated through a SAML identity provider (eduPersonPrincipalName or SAML persistent ID/eduPersonTargetedID) or linked social login accounts (e.g., a Google account)  How do we collect your data? Data is collected when users register and authetnicate at the IAM service.\nINFN could collect your data indirectly from the following sources:\n Trusted Identity Providers, e.g. your home institution IdP; Social login providers, e.g. Google  How we will use your data? INFN collects your data in order to implement:\n User authentication and authorization at the service or at trusted services relying on IAM for authentication and authorization Automated sending of email messages necessary for use of the service Statistics and development of the service Integration testing  How do we store your data? Personal data is stored until the user asks to be removed from the service by interacting with the contact person for the service. Access logs are deleted after 12 months.\nWhat are cookies? Cookies are text files placed on your computer to collect standard internet log information and visitor behaviour information. When you visit the IAM service, we may collect information from you automatically through cookies or similar technology.\nHow do we use cookies? The INFN IAM service uses cookies to:\n Keeping you signed in Store user preferences  What types of cookies do we use ? The INFN IAM service uses the following type of cookies:\n Functionality: INFN uses these cookies so that we recognize you on the IAM service and remember previously selected preferences. Only first-party cookies are used for this purpose;  How to manage cookies? You can set your browser to not accept cookies, but the IAM service will not work as a result of this choice\nChanges to this privacy policy INFN keeps this privacy policy under regular review and places any updates on this web page. This privacy policy was last updated on 19 June 2019.\nHow to contact us Should you wish to report a complaint or if you feel that INFN has not addressed your concerns in a satisfactory manner, use the following contact info:\n Davide Salomoni INFN-CNAF Viale Berti Pichat 6/2 40127 Bologna Italy davide.salomoni@cnaf.infn.it  ","excerpt":"This privacy policy will explain how INFN uses the personal data …","ref":"/v/v1.7.0/docs/iam-aas/privacy-policy/","title":"Privacy policy"},{"body":"Users can reset their password from the IAM login page by clicking on the Forgot your password? link, which opens a dialog where users can then enter their email address, and if the entered email address is linked to a registered user a reset password link will be sent to such email address.\n","excerpt":"Users can reset their password from the IAM login page by clicking on …","ref":"/v/v1.7.0/docs/tasks/user/reset-password/","title":"Reset an account password"},{"body":"The IAM server provides a RESTful API, based on the System for Cross-domain Identity Management (SCIM) standard, that can be used to manage users, change their personal information, manage their group membership, etc.\nAccess to the API is restricted to administrator users or OAuth clients that have access to the scim:read (for read access) or scim:write (for write access) OAuth scopes.\nExamples below assume OAuth authorization via bearer token: e.g.\nGET /Users/2819c223-7f76-453a-919d-413861904646 HTTP/1.1 Host: example.com Authorization: Bearer h480djs93hd8 The SCIM protocol specifies well known endpoints and HTTP methods for managing Resources defined in the SCIM core schema specification.\nIAM SCIM Endpoints IAM maps User and Group resource endpoints to the following endpoints:\n /scim/Users /scim/Groups  For each endpoint, the following methods are allowed:\n   HTTP Method Description     GET Retrieves a complete or partial Resource.   POST Create new Resource or bulk modify Resources.   PUT Replace completely a Resource.   PATCH Modifies a Resource with a set of specified changes (partial update).   DELETE Deletes a Resource.    GET /scim/Users/{id} Retrieves all the information about the user identified by id and returns results in application/json.\nRequires ROLE_ADMIN or scope scim:read.\nGET http://localhost:8080/scim/Users/2cb10ac5-5b1a-47a0-8f60-48995999f18d { \"id\": \"2cb10ac5-5b1a-47a0-8f60-48995999f18d\", \"meta\": { \"created\": \"2016-07-13T18:38:16.314+02:00\", \"lastModified\": \"2016-07-13T18:38:16.314+02:00\", \"location\": \"http://localhost:8080/scim/Users/2cb10ac5-5b1a-47a0-8f60-48995999f18d\", \"resourceType\": \"User\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"paul_mccartney\", \"name\": { \"givenName\": \"Paul\", \"familyName\": \"McCartney\", \"formatted\": \"Paul McCartney\" }, \"displayName\": \"paul_mccartney\", \"active\": false, \"emails\": [ { \"type\": \"work\", \"value\": \"paul@beatles.uk\", \"primary\": true } ] } POST /scim/Users Creates a new user, using the info specified within the request body, sent as application/json.\nRequires ROLE_ADMIN or scope scim:write.\nPOST http://localhost:8080/scim/Users/ { \"userName\": \"paul_mccartney\", \"name\": { \"givenName\": \"Paul\", \"familyName\": \"McCartney\", \"formatted\": \"Paul McCartney\" }, \"emails\": [ { \"type\": \"work\", \"value\": \"paul@beatles.uk\", \"primary\": true } ] } Successful Resource creation is indicated with a 201 Created response code. Upon successful creation, the response body contains the newly created User.\n{ \"id\": \"2cb10ac5-5b1a-47a0-8f60-48995999f18d\", \"meta\": { \"created\": \"2016-07-13T18:38:16.314+02:00\", \"lastModified\": \"2016-07-13T18:38:16.314+02:00\", \"location\": \"http://localhost:8080/scim/Users/2cb10ac5-5b1a-47a0-8f60-48995999f18d\", \"resourceType\": \"User\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"paul_mccartney\", \"name\": { \"givenName\": \"Paul\", \"familyName\": \"McCartney\", \"formatted\": \"Paul McCartney\" }, \"displayName\": \"paul_mccartney\", \"active\": false, \"emails\": [ { \"type\": \"work\", \"value\": \"paul@beatles.uk\", \"primary\": true } ] } GET /scim/Users Requires ROLE_ADMIN or scope scim:read.\nSCIM defines a standard set of operations that can be used to filter, sort, and paginate response results. The operations are specified by adding query parameters to the Resource’s endpoint.\nPagination parameters can be used together to “page through” large numbers of Resources. Pagination is not session based so clients must never assume repeatable results.\nThe following table describes the URL pagination parameters.\n   Parameter Description Default     startIndex The 1-based index of the first search result. 1   count Non-negative Integer. Specifies the desired maximum number of search results per page; e.g., 10. None.    The following table describes the query response pagination attributes.\n   Element Description     itemsPerPage Non-negative Integer. Specifies the number of search results returned in a query response page; e.g., 10.   totalResults Non-negative Integer. Specifies the total number of results matching the client query; e.g., 1000.   startIndex The 1-based index of the first result in the current set of search results; e.g., 1.    The below example returns the first 10 users (implicit startIndex as 1):\nGET /scim/Users?count=10 { \"totalResults\": 250, \"itemsPerPage\": 10, \"startIndex\": 1, \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"Resources\": [ { \"id\": \"80e5fb8d-b7c8-451a-89ba-346ae278a66f\", \"meta\": { \"created\": \"2016-07-14T12:22:46.376+02:00\", \"lastModified\": \"2016-07-14T12:22:46.376+02:00\", \"location\": \"http://localhost:8080/scim/Users/80e5fb8d-b7c8-451a-89ba-346ae278a66f\", \"resourceType\": \"User\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"test\", \"name\": { \"givenName\": \"Test\", \"familyName\": \"User\", \"formatted\": \"Test User\" }, \"displayName\": \"test\", \"active\": true, \"emails\": [ { \"type\": \"work\", \"value\": \"test@iam.test\", \"primary\": true } ], \"groups\": [ { \"display\": \"Production\", \"value\": \"c617d586-54e6-411d-8e38-64967798fa8a\", \"$ref\": \"http://localhost:8080/scim/Groups/c617d586-54e6-411d-8e38-64967798fa8a\" }, { \"display\": \"Analysis\", \"value\": \"6a384bcd-d4b3-4b7f-a2fe-7d897ada0dd1\", \"$ref\": \"http://localhost:8080/scim/Groups/6a384bcd-d4b3-4b7f-a2fe-7d897ada0dd1\" } ], \"urn:indigo-dc:scim:schemas:IndigoUser\": { \"oidcIds\": [ { \"issuer\": \"https://accounts.google.com\", \"subject\": \"105440632287425289613\" } ], \"samlIds\": [ { \"idpId\": \"https://idptestbed/idp/shibboleth\", \"userId\": \"andrea.ceccanti@example.org\" } ] } }, [...] ] } The details of the returned users can be reduced/filtered by specifying the needed attribute(s). The below example returns only the userName for all Users:\nGET http://localhost:8080/scim/Users?attributes=userName { \"totalResults\": 250, \"itemsPerPage\": 100, \"startIndex\": 1, \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"Resources\": [ { \"id\": \"80e5fb8d-b7c8-451a-89ba-346ae278a66f\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"test\" }, { \"id\": \"73f16d93-2441-4a50-88ff-85360d78c6b5\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"admin\" }, [...] ] } Multiple attributes are also supported:\nGET http://localhost:8080/scim/Users?count=2\u0026attributes=userName%2Cemails%2Curn%3Aindigo-dc%3Ascim%3Aschemas%3AIndigoUser Request params:\n count=2 attributes=userName,emails,urn:indigo-dc:scim:schemas:IndigoUser  { \"totalResults\": 250, \"itemsPerPage\": 2, \"startIndex\": 1, \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"Resources\": [ { \"id\": \"80e5fb8d-b7c8-451a-89ba-346ae278a66f\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"test\", \"emails\": [ { \"type\": \"work\", \"value\": \"test@iam.test\", \"primary\": true } ], \"urn:indigo-dc:scim:schemas:IndigoUser\": { \"oidcIds\": [ { \"issuer\": \"https://accounts.google.com\", \"subject\": \"105440632287425289613\" } ], \"samlIds\": [ { \"idpId\": \"https://idptestbed/idp/shibboleth\", \"userId\": \"andrea.ceccanti@example.org\" } ] } }, { \"id\": \"73f16d93-2441-4a50-88ff-85360d78c6b5\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"admin\", \"emails\": [ { \"type\": \"work\", \"value\": \"admin@iam.test\", \"primary\": true } ], \"urn:indigo-dc:scim:schemas:IndigoUser\": { \"oidcIds\": [ { \"issuer\": \"https://accounts.google.com\", \"subject\": \"114132403455520317223\" } ], \"samlIds\": [ { \"idpId\": \"https://idptestbed/idp/shibboleth\", \"userId\": \"ciccio.paglia@example.org\" } ] } } ] } SCIM Filtering and sorting of results are currently not supported.\nPUT /scim/Users/{id} Requires ROLE_ADMIN or scope scim:write.\nPUT performs a full update. Clients should retrieve the entire resource and then PUT the desired modifications as the operation overwrites all previously stored data. A successful PUT operation returns a 200 OK response code and the entire resource within the response body.\nExample of changing the userName from john_lennon to j.lennon and setting active as true:\nGET http://localhost:8080/scim/Users/e380b4e3-7b63-47c2-b156-3699be9ebcfe { \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"john_lennon\", \"name\": { \"givenName\": \"John\", \"familyName\": \"Lennon\", \"formatted\": \"John Lennon\" }, \"emails\": [ { \"type\": \"work\", \"value\": \"lennon@email.test\", \"primary\": true } ] } Retrieved the user’s info, update userName as \"userName\": \"j.lennon\" and add \"active\": true:\nPUT http://localhost:8080/scim/Users/e380b4e3-7b63-47c2-b156-3699be9ebcfe { \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"j.lennon\", \"name\": { \"givenName\": \"John\", \"familyName\": \"Lennon\", \"formatted\": \"John Lennon\" }, \"active\": true, \"emails\": [ { \"type\": \"work\", \"value\": \"lennon@email.test\", \"primary\": true } ] } The returned answer is:\nHTTP/1.1 200 OK Content-Type: application/scim+json;charset=UTF-8 { \"id\": \"e380b4e3-7b63-47c2-b156-3699be9ebcfe\", \"meta\": { \"created\": \"2016-07-14T15:42:56.275+02:00\", \"lastModified\": \"2016-07-14T15:42:56.445+02:00\", \"location\": \"http://localhost:8080/scim/Users/e380b4e3-7b63-47c2-b156-3699be9ebcfe\", \"resourceType\": \"User\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:User\", \"urn:indigo-dc:scim:schemas:IndigoUser\" ], \"userName\": \"j.lennon\", \"name\": { \"givenName\": \"John\", \"familyName\": \"Lennon\", \"formatted\": \"John Lennon\" }, \"displayName\": \"j.lennon\", \"active\": true, \"emails\": [ { \"type\": \"work\", \"value\": \"lennon@email.test\", \"primary\": true } ] } PATCH /scim/Users/{id} Requires ROLE_ADMIN or scope scim:write.\nPATCH enables consumers to send only the attributes requiring modification, reducing network and processing overhead. Attributes may be deleted, replaced, merged, or added in a single request. The body of a PATCH request MUST contain a partial resource with the desired modifications. The server MUST return either a 200 OK response code and the entire Resource within the response body, or a 204 No Content response code and the appropriate response headers for a successful PATCH request.\nThe following example shows how to replace the userName:\nPATCH http://localhost:8080/scim/Users/b6769dd1-3d7d-416d-be6d-020be23ba904 Body: { \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:PatchOp\" ], \"operations\": [ { \"op\": \"replace\", \"value\": { \"userName\": \"john_lennon_jr\", } } ] } The following example shows how to add an OpenID Connect account and a ssh key:\nPATCH http://localhost:8080/scim/Users/b6769dd1-3d7d-416d-be6d-020be23ba904 Body: { \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:PatchOp\" ], \"operations\": [ { \"op\": \"add\", \"value\": { \"urn:indigo-dc:scim:schemas:IndigoUser\": { \"oidcIds\": [ { \"issuer\": \"test_issuer\", \"subject\": \"test_subject\" } ], \"sshKeys\": [ { \"display\": \"Personal\", \"primary\": true, \"value\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQC4tjz4mfMLvJsM8RXIgdRYPBhH//VXLXbeLbUsJpm5ARIQPY6Gu1befPA3jqKacvdcBrMsYGiMp/DOhpkAwWclSnzMdvYLbYWkrOPwBVrRh7lvFtXFLaQZ6do4uMZHb5zU2ViTFacrJ6zJ/GLltjk4nBea7Z4qHaQdWou3Fk/108oMQGx7jqW44m+TA+HYo6rEbVWbimWVXyyiKchO2LTLKUbK6GBSWJiItezwAWR3KKs3FXKRmbJDiKESh3mDccJidfkjzNLPyDf3JHI2b/C/mcvtJsoAtkIWuVll2BhBBiqkYt3tX2llZCYGtF7rZOYTsqhw+LPnsJtsX+W7e4iN\" } ] } } } ] } DELETE /scim/Users/{id} Requires ROLE_ADMIN or scope scim:write.\nClients request user removal via DELETE.\nDELETE /scim/Users/4380e98c-02f2-4d10-85ba-9fbbdb819ed8 HTTP/1.1 200 OK Example: Client attempt to retrieve the previously deleted User:\nGET /scim/Users/4380e98c-02f2-4d10-85ba-9fbbdb819ed8 { \"status\": \"404\", \"detail\": \"No user mapped to id '4380e98c-02f2-4d10-85ba-9fbbdb819ed8'\", \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:Error\" ] } GET /scim/Groups/{id} Retrieves all the information about the group identified by id and returns results in application/json.\nRequires ROLE_ADMIN or scope scim:read.\nGET /scim/Groups/c617d586-54e6-411d-8e38-64967798fa8a { \"id\": \"c617d586-54e6-411d-8e38-64967798fa8a\", \"meta\": { \"created\": \"2016-07-14T16:22:05.170+02:00\", \"lastModified\": \"2016-07-14T16:22:05.170+02:00\", \"location\": \"http://localhost:8080/scim/Groups/c617d586-54e6-411d-8e38-64967798fa8a\", \"resourceType\": \"Group\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"Production\", \"members\": [ { \"display\": \"test\", \"value\": \"80e5fb8d-b7c8-451a-89ba-346ae278a66f\", \"$ref\": \"http://localhost:8080/scim/Users/80e5fb8d-b7c8-451a-89ba-346ae278a66f\" }, { \"display\": \"admin\", \"value\": \"73f16d93-2441-4a50-88ff-85360d78c6b5\", \"$ref\": \"http://localhost:8080/scim/Users/73f16d93-2441-4a50-88ff-85360d78c6b5\" } ] } POST /scim/Groups Creates a new group, using the info specified within the request body, sent as application/json.\nRequires ROLE_ADMIN or scope scim:write.\nPOST http://localhost:8080/scim/Groups/ { \"id\": \"7b427ebe-9058-479e-95b6-f3cebec91731\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"engineers\" } Successful Resource creation is indicated with a 201 (“Created”) response code. Upon successful creation, the response body contains the newly created User.\n{ \"id\": \"7b427ebe-9058-479e-95b6-f3cebec91731\", \"meta\": { \"created\": \"2016-07-14T16:24:50.941+02:00\", \"lastModified\": \"2016-07-14T16:24:50.941+02:00\", \"location\": \"http://localhost:8080/scim/Groups/7b427ebe-9058-479e-95b6-f3cebec91731\", \"resourceType\": \"Group\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"engineers\" } GET /scim/Groups Requires ROLE_ADMIN or scope scim:read.\nThe pagination seen for users can be applied also to groups:\nExample: retrieve the 22nd group\nGET http://localhost:8080/scim/Groups?startIndex=22\u0026count=1 { \"totalResults\": 22, \"itemsPerPage\": 1, \"startIndex\": 22, \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ], \"Resources\": [ { \"id\": \"c617d586-54e6-411d-8e38-649677980020\", \"meta\": { \"created\": \"2016-07-14T16:33:20.135+02:00\", \"lastModified\": \"2016-07-14T16:33:20.135+02:00\", \"location\": \"http://localhost:8080/scim/Groups/c617d586-54e6-411d-8e38-649677980020\", \"resourceType\": \"Group\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"Test-020\" } ] } PUT /scim/Groups/{id} Requires ROLE_ADMIN or scope scim:write.\nPUT performs a full update. Clients should retrieve the entire resource and then PUT the desired modifications as the operation overwrites all previously stored data. A successful PUT operation returns a 200 OK response code and the entire resource within the response body.\nExample of replacing group with a different displayName:\nPUT http://localhost:8080/scim/Groups/891d042d-fc6e-4408-8a3a-ad9dfdf5db89 { \"id\": \"891d042d-fc6e-4408-8a3a-ad9dfdf5db89\", \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"engineers_updated\" } { \"id\": \"891d042d-fc6e-4408-8a3a-ad9dfdf5db89\", \"meta\": { \"created\": \"2016-07-14T16:37:18.302+02:00\", \"lastModified\": \"2016-07-14T16:37:18.411+02:00\", \"location\": \"http://localhost:8080/scim/Groups/891d042d-fc6e-4408-8a3a-ad9dfdf5db89\", \"resourceType\": \"Group\" }, \"schemas\": [ \"urn:ietf:params:scim:schemas:core:2.0:Group\" ], \"displayName\": \"engineers_updated\" } PATCH /scim/Groups/{id} Requires ROLE_ADMIN or scope scim:write.\nThe following example shows how to add member to a group:\nPATCH http://localhost:8080/scim/Groups/4ca7fa98-0875-4eb3-a71f-0f88ce5632cf { \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:PatchOp\" ], \"operations\": [ { \"op\": \"add\", \"path\": \"members\", \"value\": [ { \"display\": \"john_lennon\", \"value\": \"e9c8cfca-7158-4a0d-9684-4abdede617cd\", \"$ref\": \"http://localhost:8080/scim/Users/e9c8cfca-7158-4a0d-9684-4abdede617cd\" } ] } ] } DELETE /scim/Groups/{id} Requires ROLE_ADMIN or scope scim:write.\nClients request group removal via DELETE.\nDELETE /scim/Groups/5bae2407-08e3-4171-b180-4b4a0196e7b6 HTTP/1.1 200 OK Example: Client attempt to retrieve the previously deleted User:\nGET /scim/Groups/5bae2407-08e3-4171-b180-4b4a0196e7b6 { \"status\": \"404\", \"detail\": \"No group mapped to id '5bae2407-08e3-4171-b180-4b4a0196e7b6'\", \"schemas\": [ \"urn:ietf:params:scim:api:messages:2.0:Error\" ] } ","excerpt":"The IAM server provides a RESTful API, based on the System for …","ref":"/v/v1.7.0/docs/reference/api/scim-api/","title":"SCIM API"},{"body":"In OpenID Connect and OAuth, scopes are used to determine the privileges granted to a client application for a given session. For example, the openid and profile scope are used to obtain access to identity information about a user, but applications can define their own scopes to implement domain-specifc authorization (e.g., the WLCG storage.read and storage.modify scopes are examples of domain-specific OAuth scopes).\nIAM implements two levels of access control on OAuth scopes:\n  a client-level vetting, implemented through the MitreID connect library, so that each registered client has a list of allowed scopes. When a client requests a scope that is not allowed to get, it gets an invalid_scope error.\n  an identity-related vetting, implemented through the concept of Scope policies, that can be used to limit access to scopes based on user identity.\n  This behaviour is described in the following picture:\n  Scope policies IAM Scope policies provide a mechanism to control access to OAuth scopes. A scope policy defines:\n  a rule, which can be PERMIT or DENY, that determines the behaviour of the policy. PERMIT policies are used to allow access to scopes, while DENY policies are used to block access to scopes;\n  a scopes selector, i.e. a set of scopes for which the policy applies (and a scope matchingPolicy used to determine the scope matching algorithm used);\n  an account or group selector, used to determine for which user account or group of accounts the policy should apply.\n  An example scope policy is given below:\n{ \"id\": 1, \"description\": \"Default Permit ALL policy\", \"creationTime\": \"2019-10-08T13:52:20.000+02:00\", \"lastUpdateTime\": \"2019-10-08T13:52:20.000+02:00\", \"rule\": \"PERMIT\", \"matchingPolicy\": \"EQ\", \"account\": null, \"group\": null, \"scopes\": null } The policy above is a PERMIT policy that allow access to all the scopes to any account, as clarified by the policy description.\nIn the policy, the account and group selector are not specified, which means that the policy would apply to any user account. Also the scopes selector is not specified, which means that the policy would apply to any scope.\nThe policies that are not explicitly bound to an account or a group are called default scope policies.  The example policy above is enabled by the default IAM configuration, which in practice limits the default scope vetting only to the client level.\nHere’s an another example, now showing two policies:\n[{ \"id\": 4, \"description\": \"Deny access to compute.* scopes to normal users\", \"creationTime\": \"2019-12-18T15:11:04.000+01:00\", \"lastUpdateTime\": \"2019-12-18T15:11:04.000+01:00\", \"rule\": \"DENY\", \"matchingPolicy\": \"EQ\", \"account\": null, \"group\": null, \"scopes\": [ \"compute.create\", \"compute.read\", \"compute.cancel\", \"compute.modify\" ] }, { \"id\": 13, \"description\": \"Allow access to compute.* scopes to wlcg/pilot users\", \"creationTime\": \"2019-12-18T15:19:20.000+01:00\", \"lastUpdateTime\": \"2019-12-18T15:19:20.000+01:00\", \"rule\": \"PERMIT\", \"matchingPolicy\": \"EQ\", \"account\": null, \"group\": { \"uuid\": \"25084f30-1d71-4ab2-91e8-11148af16682\", \"name\": \"wlcg/pilots\", \"location\": \"https://wlcg.cloud.cnaf.infn.it/scim/Groups/25084f30-1d71-4ab2-91e8-11148af16682\" }, \"scopes\": [ \"compute.create\", \"compute.read\", \"compute.cancel\", \"compute.modify\" ] }] The first policy, as clarified in the description, would block access to the compute.create, compute.read, compute.cancel and compute.modify scopes to any authenticated user. The second policy would instead allow access to compute.* scopes only to members of the wlcg/pilot group (again, as written in the policy description).\nThe two policy can work together because the IAM policy engine evaluates the policy in a specific order: account-level policies are applied first, then group-level policies are applied and finally policies that are not bound to any specific account or group are applied. This means that a policy defined to apply at the account or group-level typically wins over a more general one, as in the example above. Also, scopes being vetted are evaluated only once across different levels. This means, for example, that a scope that was evaluated at account-level will not be re-evaluated at group-level: the decision taken for such scope is not reconsidered.\nIn more technical terms, the policy engine implements a deny-override policy composition logic, which means that a deny policy which matches a request at a given level wins over a permit policy at that same level. For example, if there are two account-level policies that would apply for scope s, one which would yield a PERMIT result, and one that would yield a DENY, the DENY will win.\nScope matching algorithms IAM currently supports three scope matching algorithms:\n  EQ: which is the default, uses string equality when comparing requested scopes to scopes allowed by the client configuration or by the scope policies;\n  REGEXP: which uses a regular expression evaluation when comparting requested scopes to scopes allowed by the client configuration or scope policies;\n  PATH: which uses a WLCG-specific path-matching logic, described in more detail below, to compare requested scopes to scopes allowed by the client configuration or by the scope policies.\n  REGEXP and PATH matching algorithms are configured by adding a scope.matchers section to the IAM configuration, as shown in the following fragment which defines the scope matching algorithm for WLCG profile scopes:\nscope:matchers:- name:storage.readtype:pathprefix:storage.readpath:/- name:storage.createtype:pathprefix:storage.createpath:/- name:storage.modifytype:pathprefix:storage.modifypath:/- name:wlcg.groupstype:regexpregexp:^wlcg\\.groups(?::((?:\\/[a-zA-Z0-9][a-zA-Z0-9_.-]*)+))?$PATH scope matching The PATH scope matching algorithm is used to implement a scope-matching logic compliant with the WLCG JWT profile rules for storage scope matching, which allow a scope to contain a parametric part describing a path. Following the Scitokens model, permissions granted on a path apply transitively to subpaths. To give an example:\nstorage.read:/cms will grant read access to the /cms directory and all its content and subdirectories, but does not grant access to the /atlas directory.\nFollowing the same logic, a client allowed to request storage.read:/example, when PATH scope matching is configured as described above for the storage.read parametric scope, will be allowed to request the storage.read:/example but also any scope containing subpaths of /example, e.g., storage.read:/example/subdir/file.\nREGEXP scope matching The REGEXP scope matching algorithms uses regular expression matching to determine whether a scope is allowed for a given client or user.\nTaking the parametric wlcg.groups scope described above:\n- name:wlcg.groupstype:regexpregexp:^wlcg\\.groups(?::((?:\\/[a-zA-Z0-9][a-zA-Z0-9_.-]*)+))?$A client allowed to request the scope wlcg.groups will also be allowed for the scope wlcg.groups:/a/group or any other group name matching the regexp.\nThe Scope policy API The Scope Policy API is a REST API that allows to manage scope policies. API requires IAM administrator privileges.\nGET /iam/scope_policies Returns a JSON representation of the Scope Policies defined for the organization.\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nCommand example\n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer $TOKEN\" -X GET https://example.com/iam/scope_policies/ Success response Condition: Being Authenticated and authorized\nCode: 200 OK\nContent: An array of JSON representations for the scope policies defined in the orgazionation\n[{ \"id\": 1, \"description\": null, \"creationTime\": \"2018-02-27T07:26:21.000+01:00\", \"lastUpdateTime\": \"2018-02-27T07:26:21.000+01:00\", \"rule\":\"PERMIT\", \"matchingPolicy\":\"EQ\", \"account\":null, \"group\":null, \"scopes\":null }] Error responses Condition: User is not authenticated\nCode: 401 Unauthorized\nContent:\n{ \"error\":\"unauthorized\", \"error_description\":\"Full authentication is required to access this resource\" } OR\n{ \"error\":\"invalid_token\", \"error_description\":\"Invalid access token: \u003cAccess Token\u003e\" } If an invalid token is provided or no token is provided.\nGET /iam/scope_policies/{id} Returns the JSON representation for the scope policy identified by id.\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nCommand example\n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer $TOKEN\" -X GET https://example.com/iam/scope_policies/1 Success response Condition: Being Authenticated\nCode: 200 OK\nContent: The JSON representation for the scope policy\n{ \"id\": 1, \"description\": null, \"creationTime\": \"2018-02-27T07:26:21.000+01:00\", \"lastUpdateTime\": \"2018-02-27T07:26:21.000+01:00\", \"rule\":\"PERMIT\", \"matchingPolicy\":\"EQ\", \"account\":null, \"group\":null, \"scopes\":null } Error responses Condition: User is not authenticated\nCode: 401 Unauthorized\nContent:\n{ \"error\":\"unauthorized\", \"error_description\":\"Full authentication is required to access this resource\" } OR\n{ \"error\":\"invalid_token\", \"error_description\":\"Invalid access token: \u003cAccess Token\u003e\" } If an invalid token is provided or no token is provided.\nCondition: The Scope Policy {id} is not defined for the organization\nCode: 404 NOT FOUND\nContent:\n{ \"error\":\"No scope policy found for id: {id}\" } PUT /iam/scope_policies/{id} Changes an existing Scope Policy.\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nData constraints\nProvide a representation of the Scope Policy to be modified.\n{ \"id\": [positive integer], \"description\": [text, optional, at most 512 chars], \"rule\": [text, allowed values: \"PERMIT\", \"DENY\"], \"matchingPolicy\":[text, allowed values: \"EQ\", \"REGEXP\", \"PATH\"], \"account\":[a valid account identifier], \"group\":[a valid group identifier ], \"scopes\":[a list of scopes, minimum 1 and maximum 255 chars] } Success response Condition: The Scope Policy is modified for the organization\nCode: 204 No Content\nError responses Condition: Policy validation error\nCode: 400 BAD REQUEST\n{ \"error\":\"Invalid scope policy: rule cannot be empty\" } Or\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\":\"unauthorized\", \"error_description\":\"Full authentication is required to access this resource\" } OR\n{ \"error\":\"invalid_token\", \"error_description\":\"Invalid access token: \u003cAccess Token\u003e\" } If an invalid token is provided or no token is provided at all\nOr\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\":\"access_denied\", \"error_description\":\"Access is denied\" } POST /iam/scope_policies Creates a Scope Policy for the organization\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nData constraints\nProvide a representation of the Scope Policy to be created\n{ \"description\": [text, optional, at most 512 chars], \"rule\": [text, allowed values: \"PERMIT\", \"DENY\"], \"matchingPolicy\":[text, allowed values: \"EQ\", \"REGEXP\", \"PATH\"], \"account\":[a valid account selector], \"group\":[a valid group selector], \"scopes\":[a list of scopes, each scope string should be no longer than 255 chars] } Data example\n{ \"description\": \"Allow access to compute.* scopes to wlcg/pilot users\", \"rule\": \"PERMIT\", \"scopes\": [\"compute.read\", \"compute.modify\", \"compute.create\", \"compute.cancel\"], \"matchingPolicy\": \"EQ\", \"group\": { \"uuid\": \"25084f30-1d71-4ab2-91e8-11148af16682\" } } Success response Condition: The Scope Policy is created for the organization\nCode: 201 Created\nError responses Condition: Policy validation error\nCode: 400 BAD REQUEST\n{ \"error\":\"Invalid scope policy: rule cannot be empty\" } Or\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\":\"unauthorized\", \"error_description\":\"Full authentication is required to access this resource\" } OR\n{ \"error\":\"invalid_token\", \"error_description\":\"Invalid access token: \u003cAccess Token\u003e\" } If an invalid token is provided or no token is provided at all\nOr\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\":\"access_denied\", \"error_description\":\"Access is denied\" } DELETE /iam/scope_policies/{id} Deletes the Scope Policy for the organization.\nAuthentication required: yes\nAuthorization required: ROLE_ADMIN\nCommand example\n$ curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer $TOKEN\" -X DELETE https://example.com/iam/scope_policies/{id} Where {id} is the Scope Policy id number\nSuccess response Condition: The Scope Policy is defined for the organization\nCode: 204 NO CONTENT\nError responses Condition: The Scope Policy {id} is not defined or inexistent for the organization\nCode: 404 NOT FOUND\nContent:\n{ \"error\":\"No scope policy found for id: 1\" } Or\nCondition: Unauthenticated access\nCode: 401 UNAUTHORIZED\nContent:\n{ \"error\": \"unauthorized\", \"error_description\": \"Full authentication is required to access this resource\" } OR\n{ \"error\":\"invalid_token\", \"error_description\":\"Invalid access token: \u003cAccess Token\u003e\" } If an invalid token is provided or no token is provided.\nOr\nCondition: Authorization error\nCode: 403 FORBIDDEN\nContent:\n{ \"error\": \"Access is denied\" } ","excerpt":"In OpenID Connect and OAuth, scopes are used to determine the …","ref":"/v/v1.7.0/docs/reference/api/scope-policy-api/","title":"Scope Policy API"},{"body":"","excerpt":"","ref":"/v/v1.7.0/search/","title":"Search Results"},{"body":"The IAM service instances provided and operated by INFN may be subject to specific SLAs to be defined with the collaborating organizations/projects.\nIf no specific SLA is defined, a standard SLA applies, namely the service is operational 24x7, with the support granted on a best-effort basis from Monday to Friday during INFN office hours.\n","excerpt":"The IAM service instances provided and operated by INFN may be subject …","ref":"/v/v1.7.0/docs/iam-aas/sla/","title":"Service Level Agreement"},{"body":"The IAM service instances provided and operated by INFN follow the rules for the use of INFN IT services, namely:\n Regulation for the use of the INFN IT resources  In addition, each of these IAM service instances has a specific Terms of Service (ToS) agreement. Subject to these ToS, the IAM service instances are meant to be used for authentication and authorization of users belonging to one or more of the following categories:\n INFN users Users belonging to organizations involved in projects, initiatives and experiments INFN collaborates with Users belonging to other organizations, provided specific agreements and Service Level Agreements have been agreed upon  ","excerpt":"The IAM service instances provided and operated by INFN follow the …","ref":"/v/v1.7.0/docs/iam-aas/terms-of-service/","title":"Terms of service"},{"body":"","excerpt":"","ref":"/v/v1.7.0/docs/reference/api/token-exchange-policy-api/","title":"Token exchange policy API"}]